
leds_shiftOut.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000598  0000062c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000598  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800102  00800102  0000062e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000062e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000660  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a4  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006cf  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000479  00000000  00000000  0000167b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00001af4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000414  00000000  00000000  00001c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023b  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002297  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e9       	ldi	r30, 0x98	; 152
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 3c 02 	call	0x478	; 0x478 <main>
  9e:	0c 94 ca 02 	jmp	0x594	; 0x594 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <InitPorts>:
	TIMSK1 |= (1 << OCIE1A); // Разрешить прерывание по совпадению
}

void InitSPI(void)
{
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0); // F_SPI = F_CPU/16 = 1 МГц	
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	8c 62       	ori	r24, 0x2C	; 44
  aa:	84 b9       	out	0x04, r24	; 4
  ac:	2a 98       	cbi	0x05, 2	; 5
  ae:	52 98       	cbi	0x0a, 2	; 10
  b0:	5a 9a       	sbi	0x0b, 2	; 11
  b2:	08 95       	ret

000000b4 <InitTimer>:
  b4:	e1 e8       	ldi	r30, 0x81	; 129
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	88 60       	ori	r24, 0x08	; 8
  bc:	80 83       	st	Z, r24
  be:	80 81       	ld	r24, Z
  c0:	85 60       	ori	r24, 0x05	; 5
  c2:	80 83       	st	Z, r24
  c4:	80 ea       	ldi	r24, 0xA0	; 160
  c6:	96 e0       	ldi	r25, 0x06	; 6
  c8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  cc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  d0:	ef e6       	ldi	r30, 0x6F	; 111
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	80 83       	st	Z, r24
  da:	08 95       	ret

000000dc <ShiftOut19>:
}

void ShiftOut19(uint32_t data)
{
  dc:	0f 93       	push	r16
  de:	1f 93       	push	r17
	PORTB &= ~(1 << PINB2);  // ST_CP = 0
  e0:	2a 98       	cbi	0x05, 2	; 5
	
	//(биты 16-23)
	SPDR = (data >> 16) & 0xFF;
  e2:	8c 01       	movw	r16, r24
  e4:	22 27       	eor	r18, r18
  e6:	33 27       	eor	r19, r19
  e8:	0e bd       	out	0x2e, r16	; 46
	while(!(SPSR & (1 << SPIF)));
  ea:	0d b4       	in	r0, 0x2d	; 45
  ec:	07 fe       	sbrs	r0, 7
  ee:	fd cf       	rjmp	.-6      	; 0xea <ShiftOut19+0xe>
		
	//(биты 8-15)
	SPDR = (data >> 8) & 0xFF;
  f0:	07 2f       	mov	r16, r23
  f2:	18 2f       	mov	r17, r24
  f4:	29 2f       	mov	r18, r25
  f6:	33 27       	eor	r19, r19
  f8:	0e bd       	out	0x2e, r16	; 46
	while(!(SPSR & (1 << SPIF)));
  fa:	0d b4       	in	r0, 0x2d	; 45
  fc:	07 fe       	sbrs	r0, 7
  fe:	fd cf       	rjmp	.-6      	; 0xfa <ShiftOut19+0x1e>
	
	//(биты 0-7)
	SPDR = data & 0xFF;
 100:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & (1 << SPIF)));
 102:	0d b4       	in	r0, 0x2d	; 45
 104:	07 fe       	sbrs	r0, 7
 106:	fd cf       	rjmp	.-6      	; 0x102 <ShiftOut19+0x26>
		
	// Защелка данных - высокий уровень
	PORTB |= (1 << PINB2);  // ST_CP = 1
 108:	2a 9a       	sbi	0x05, 2	; 5
}
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <__vector_1>:

// Прерывания
ISR(INT0_vect) {
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
	button_pressed = 1;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <button_pressed>
}
 122:	8f 91       	pop	r24
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <__vector_11>:

ISR(TIMER1_COMPA_vect) {
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	8f 93       	push	r24
	tick = 1;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <tick>
}
 140:	8f 91       	pop	r24
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <Mode1_collect>:
// ------------------------
// Режимы
// ------------------------

void Mode1_collect(void)
{
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
	if (step < LED_COUNT)
 150:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <step>
 154:	83 31       	cpi	r24, 0x13	; 19
 156:	b0 f4       	brcc	.+44     	; 0x184 <Mode1_collect+0x38>
	{
		frame = (1UL << step);
 158:	41 e0       	ldi	r20, 0x01	; 1
 15a:	50 e0       	ldi	r21, 0x00	; 0
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	8a 01       	movw	r16, r20
 162:	9b 01       	movw	r18, r22
 164:	04 c0       	rjmp	.+8      	; 0x16e <Mode1_collect+0x22>
 166:	00 0f       	add	r16, r16
 168:	11 1f       	adc	r17, r17
 16a:	22 1f       	adc	r18, r18
 16c:	33 1f       	adc	r19, r19
 16e:	8a 95       	dec	r24
 170:	d2 f7       	brpl	.-12     	; 0x166 <Mode1_collect+0x1a>
 172:	00 93 05 01 	sts	0x0105, r16	; 0x800105 <frame>
 176:	10 93 06 01 	sts	0x0106, r17	; 0x800106 <frame+0x1>
 17a:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <frame+0x2>
 17e:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <frame+0x3>
 182:	28 c0       	rjmp	.+80     	; 0x1d4 <Mode1_collect+0x88>
	}
	else if (step < 2 * LED_COUNT)
 184:	86 32       	cpi	r24, 0x26	; 38
 186:	c0 f4       	brcc	.+48     	; 0x1b8 <Mode1_collect+0x6c>
	{
		frame = (1UL << (2 * LED_COUNT - step - 1));
 188:	25 e2       	ldi	r18, 0x25	; 37
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	28 1b       	sub	r18, r24
 18e:	31 09       	sbc	r19, r1
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	a0 e0       	ldi	r26, 0x00	; 0
 196:	b0 e0       	ldi	r27, 0x00	; 0
 198:	04 c0       	rjmp	.+8      	; 0x1a2 <Mode1_collect+0x56>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	aa 1f       	adc	r26, r26
 1a0:	bb 1f       	adc	r27, r27
 1a2:	2a 95       	dec	r18
 1a4:	d2 f7       	brpl	.-12     	; 0x19a <Mode1_collect+0x4e>
 1a6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <frame>
 1aa:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <frame+0x1>
 1ae:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <frame+0x2>
 1b2:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <frame+0x3>
 1b6:	0e c0       	rjmp	.+28     	; 0x1d4 <Mode1_collect+0x88>
	}
	else
	{
		step = 0;
 1b8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <step>
		frame = (1UL << step);
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	a0 e0       	ldi	r26, 0x00	; 0
 1c2:	b0 e0       	ldi	r27, 0x00	; 0
 1c4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <frame>
 1c8:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <frame+0x1>
 1cc:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <frame+0x2>
 1d0:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <frame+0x3>
	}
	
	ShiftOut19(frame);
 1d4:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <frame>
 1d8:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <frame+0x1>
 1dc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <frame+0x2>
 1e0:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <frame+0x3>
 1e4:	0e 94 6e 00 	call	0xdc	; 0xdc <ShiftOut19>
	step++;
 1e8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <step>
 1ec:	8f 5f       	subi	r24, 0xFF	; 255
 1ee:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <step>
}
 1f2:	1f 91       	pop	r17
 1f4:	0f 91       	pop	r16
 1f6:	08 95       	ret

000001f8 <Mode2_tripleCollect>:

void Mode2_tripleCollect(void)
{
 1f8:	4f 92       	push	r4
 1fa:	5f 92       	push	r5
 1fc:	6f 92       	push	r6
 1fe:	7f 92       	push	r7
 200:	8f 92       	push	r8
 202:	9f 92       	push	r9
 204:	af 92       	push	r10
 206:	bf 92       	push	r11
 208:	cf 92       	push	r12
 20a:	df 92       	push	r13
 20c:	ef 92       	push	r14
 20e:	ff 92       	push	r15
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
	static uint8_t pos_led = 0; // текущая позиция
	static uint8_t count = 1;
	static uint8_t line = 0;

	frame = 0;
 214:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <frame>
 218:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <frame+0x1>
 21c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <frame+0x2>
 220:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <frame+0x3>
	for(uint8_t i = 0; i < count; i++)
 224:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 228:	44 23       	and	r20, r20
 22a:	69 f1       	breq	.+90     	; 0x286 <Mode2_tripleCollect+0x8e>
	{
		frame |= (1UL << ((pos_led + i) % LED_COUNT));
 22c:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <pos_led.1651>
 230:	20 e0       	ldi	r18, 0x00	; 0
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	c1 2c       	mov	r12, r1
 236:	d1 2c       	mov	r13, r1
 238:	76 01       	movw	r14, r12
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	c3 e1       	ldi	r28, 0x13	; 19
 23e:	d0 e0       	ldi	r29, 0x00	; 0
 240:	81 2c       	mov	r8, r1
 242:	91 2c       	mov	r9, r1
 244:	54 01       	movw	r10, r8
 246:	83 94       	inc	r8
 248:	cf 01       	movw	r24, r30
 24a:	82 0f       	add	r24, r18
 24c:	93 1f       	adc	r25, r19
 24e:	be 01       	movw	r22, r28
 250:	0e 94 a2 02 	call	0x544	; 0x544 <__divmodhi4>
 254:	24 01       	movw	r4, r8
 256:	35 01       	movw	r6, r10
 258:	04 c0       	rjmp	.+8      	; 0x262 <Mode2_tripleCollect+0x6a>
 25a:	44 0c       	add	r4, r4
 25c:	55 1c       	adc	r5, r5
 25e:	66 1c       	adc	r6, r6
 260:	77 1c       	adc	r7, r7
 262:	8a 95       	dec	r24
 264:	d2 f7       	brpl	.-12     	; 0x25a <Mode2_tripleCollect+0x62>
 266:	c4 28       	or	r12, r4
 268:	d5 28       	or	r13, r5
 26a:	e6 28       	or	r14, r6
 26c:	f7 28       	or	r15, r7
 26e:	2f 5f       	subi	r18, 0xFF	; 255
 270:	3f 4f       	sbci	r19, 0xFF	; 255
	static uint8_t pos_led = 0; // текущая позиция
	static uint8_t count = 1;
	static uint8_t line = 0;

	frame = 0;
	for(uint8_t i = 0; i < count; i++)
 272:	24 17       	cp	r18, r20
 274:	48 f3       	brcs	.-46     	; 0x248 <Mode2_tripleCollect+0x50>
 276:	c0 92 05 01 	sts	0x0105, r12	; 0x800105 <frame>
 27a:	d0 92 06 01 	sts	0x0106, r13	; 0x800106 <frame+0x1>
 27e:	e0 92 07 01 	sts	0x0107, r14	; 0x800107 <frame+0x2>
 282:	f0 92 08 01 	sts	0x0108, r15	; 0x800108 <frame+0x3>
	{
		frame |= (1UL << ((pos_led + i) % LED_COUNT));
	}

	pos_led = (pos_led + 1) % LED_COUNT;
 286:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pos_led.1651>
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	01 96       	adiw	r24, 0x01	; 1
 28e:	63 e1       	ldi	r22, 0x13	; 19
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	0e 94 a2 02 	call	0x544	; 0x544 <__divmodhi4>
 296:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pos_led.1651>

	if(pos_led == 0)
 29a:	81 11       	cpse	r24, r1
 29c:	16 c0       	rjmp	.+44     	; 0x2ca <Mode2_tripleCollect+0xd2>
	{
		if(line == 0)
 29e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <line.1653>
 2a2:	81 11       	cpse	r24, r1
 2a4:	0a c0       	rjmp	.+20     	; 0x2ba <Mode2_tripleCollect+0xc2>
		{
			if(count < 3)
 2a6:	43 30       	cpi	r20, 0x03	; 3
 2a8:	20 f4       	brcc	.+8      	; 0x2b2 <Mode2_tripleCollect+0xba>
			{
				count++;
 2aa:	4f 5f       	subi	r20, 0xFF	; 255
 2ac:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_start>
 2b0:	0c c0       	rjmp	.+24     	; 0x2ca <Mode2_tripleCollect+0xd2>
			}
			else
			{
				line = 1;
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <line.1653>
 2b8:	08 c0       	rjmp	.+16     	; 0x2ca <Mode2_tripleCollect+0xd2>
			}
		}
		else
		{
			if(count > 1)
 2ba:	42 30       	cpi	r20, 0x02	; 2
 2bc:	20 f0       	brcs	.+8      	; 0x2c6 <Mode2_tripleCollect+0xce>
			{
				count--;
 2be:	41 50       	subi	r20, 0x01	; 1
 2c0:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_start>
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <Mode2_tripleCollect+0xd2>
			}
			else
			{
				line = 0;
 2c6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <line.1653>
			}
		}
	}

	ShiftOut19(frame);
 2ca:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <frame>
 2ce:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <frame+0x1>
 2d2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <frame+0x2>
 2d6:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <frame+0x3>
 2da:	0e 94 6e 00 	call	0xdc	; 0xdc <ShiftOut19>
}
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	ff 90       	pop	r15
 2e4:	ef 90       	pop	r14
 2e6:	df 90       	pop	r13
 2e8:	cf 90       	pop	r12
 2ea:	bf 90       	pop	r11
 2ec:	af 90       	pop	r10
 2ee:	9f 90       	pop	r9
 2f0:	8f 90       	pop	r8
 2f2:	7f 90       	pop	r7
 2f4:	6f 90       	pop	r6
 2f6:	5f 90       	pop	r5
 2f8:	4f 90       	pop	r4
 2fa:	08 95       	ret

000002fc <Mode3_creative>:

void Mode3_creative(void)
{
 2fc:	cf 92       	push	r12
 2fe:	df 92       	push	r13
 300:	ef 92       	push	r14
 302:	ff 92       	push	r15
 304:	0f 93       	push	r16
 306:	1f 93       	push	r17
	static uint8_t line = 0;

	if (line == 0)
 308:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 30c:	81 11       	cpse	r24, r1
 30e:	3f c0       	rjmp	.+126    	; 0x38e <Mode3_creative+0x92>
	{
		if (step < 10)
 310:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <step>
 314:	8a 30       	cpi	r24, 0x0A	; 10
 316:	a8 f5       	brcc	.+106    	; 0x382 <Mode3_creative+0x86>
		{
			frame |= (1UL << step);
			frame |= (1UL << (18 - step));
 318:	41 e0       	ldi	r20, 0x01	; 1
 31a:	50 e0       	ldi	r21, 0x00	; 0
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	6a 01       	movw	r12, r20
 322:	7b 01       	movw	r14, r22
 324:	08 2e       	mov	r0, r24
 326:	04 c0       	rjmp	.+8      	; 0x330 <Mode3_creative+0x34>
 328:	cc 0c       	add	r12, r12
 32a:	dd 1c       	adc	r13, r13
 32c:	ee 1c       	adc	r14, r14
 32e:	ff 1c       	adc	r15, r15
 330:	0a 94       	dec	r0
 332:	d2 f7       	brpl	.-12     	; 0x328 <Mode3_creative+0x2c>
 334:	00 91 05 01 	lds	r16, 0x0105	; 0x800105 <frame>
 338:	10 91 06 01 	lds	r17, 0x0106	; 0x800106 <frame+0x1>
 33c:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <frame+0x2>
 340:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <frame+0x3>
 344:	0c 29       	or	r16, r12
 346:	1d 29       	or	r17, r13
 348:	2e 29       	or	r18, r14
 34a:	3f 29       	or	r19, r15
 34c:	e2 e1       	ldi	r30, 0x12	; 18
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	e8 1b       	sub	r30, r24
 352:	f1 09       	sbc	r31, r1
 354:	04 c0       	rjmp	.+8      	; 0x35e <Mode3_creative+0x62>
 356:	44 0f       	add	r20, r20
 358:	55 1f       	adc	r21, r21
 35a:	66 1f       	adc	r22, r22
 35c:	77 1f       	adc	r23, r23
 35e:	ea 95       	dec	r30
 360:	d2 f7       	brpl	.-12     	; 0x356 <Mode3_creative+0x5a>
 362:	40 2b       	or	r20, r16
 364:	51 2b       	or	r21, r17
 366:	62 2b       	or	r22, r18
 368:	73 2b       	or	r23, r19
 36a:	40 93 05 01 	sts	0x0105, r20	; 0x800105 <frame>
 36e:	50 93 06 01 	sts	0x0106, r21	; 0x800106 <frame+0x1>
 372:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <frame+0x2>
 376:	70 93 08 01 	sts	0x0108, r23	; 0x800108 <frame+0x3>
			step++;
 37a:	8f 5f       	subi	r24, 0xFF	; 255
 37c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <step>
 380:	6a c0       	rjmp	.+212    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		}
		else
		{
			line = 1;
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			step = 0;
 388:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <step>
 38c:	64 c0       	rjmp	.+200    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		}
	}
	else if (line == 1)
 38e:	81 30       	cpi	r24, 0x01	; 1
 390:	91 f4       	brne	.+36     	; 0x3b6 <Mode3_creative+0xba>
	{
		frame = 0x7FFFF;
 392:	8f ef       	ldi	r24, 0xFF	; 255
 394:	9f ef       	ldi	r25, 0xFF	; 255
 396:	a7 e0       	ldi	r26, 0x07	; 7
 398:	b0 e0       	ldi	r27, 0x00	; 0
 39a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <frame>
 39e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <frame+0x1>
 3a2:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <frame+0x2>
 3a6:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <frame+0x3>
		line = 2;
 3aa:	82 e0       	ldi	r24, 0x02	; 2
 3ac:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		step = 0;
 3b0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <step>
 3b4:	50 c0       	rjmp	.+160    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
	}
	else if (line == 2)
 3b6:	82 30       	cpi	r24, 0x02	; 2
 3b8:	09 f0       	breq	.+2      	; 0x3bc <Mode3_creative+0xc0>
 3ba:	4d c0       	rjmp	.+154    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
	{
		if (step < 10)
 3bc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <step>
 3c0:	8a 30       	cpi	r24, 0x0A	; 10
 3c2:	e8 f5       	brcc	.+122    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		{
			frame &= ~(1UL << step);
			frame &= ~(1UL << (18 - step));
 3c4:	41 e0       	ldi	r20, 0x01	; 1
 3c6:	50 e0       	ldi	r21, 0x00	; 0
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	8a 01       	movw	r16, r20
 3ce:	9b 01       	movw	r18, r22
 3d0:	08 2e       	mov	r0, r24
 3d2:	04 c0       	rjmp	.+8      	; 0x3dc <Mode3_creative+0xe0>
 3d4:	00 0f       	add	r16, r16
 3d6:	11 1f       	adc	r17, r17
 3d8:	22 1f       	adc	r18, r18
 3da:	33 1f       	adc	r19, r19
 3dc:	0a 94       	dec	r0
 3de:	d2 f7       	brpl	.-12     	; 0x3d4 <Mode3_creative+0xd8>
 3e0:	00 95       	com	r16
 3e2:	10 95       	com	r17
 3e4:	20 95       	com	r18
 3e6:	30 95       	com	r19
 3e8:	c0 90 05 01 	lds	r12, 0x0105	; 0x800105 <frame>
 3ec:	d0 90 06 01 	lds	r13, 0x0106	; 0x800106 <frame+0x1>
 3f0:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <frame+0x2>
 3f4:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <frame+0x3>
 3f8:	0c 21       	and	r16, r12
 3fa:	1d 21       	and	r17, r13
 3fc:	2e 21       	and	r18, r14
 3fe:	3f 21       	and	r19, r15
 400:	e2 e1       	ldi	r30, 0x12	; 18
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	e8 1b       	sub	r30, r24
 406:	f1 09       	sbc	r31, r1
 408:	04 c0       	rjmp	.+8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 40a:	44 0f       	add	r20, r20
 40c:	55 1f       	adc	r21, r21
 40e:	66 1f       	adc	r22, r22
 410:	77 1f       	adc	r23, r23
 412:	ea 95       	dec	r30
 414:	d2 f7       	brpl	.-12     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 416:	40 95       	com	r20
 418:	50 95       	com	r21
 41a:	60 95       	com	r22
 41c:	70 95       	com	r23
 41e:	40 23       	and	r20, r16
 420:	51 23       	and	r21, r17
 422:	62 23       	and	r22, r18
 424:	73 23       	and	r23, r19
 426:	40 93 05 01 	sts	0x0105, r20	; 0x800105 <frame>
 42a:	50 93 06 01 	sts	0x0106, r21	; 0x800106 <frame+0x1>
 42e:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <frame+0x2>
 432:	70 93 08 01 	sts	0x0108, r23	; 0x800108 <frame+0x3>
			step++;
 436:	8f 5f       	subi	r24, 0xFF	; 255
 438:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <step>
 43c:	0c c0       	rjmp	.+24     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		}
		else
		{
			line = 0;
 43e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			step = 0;
 442:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <step>
			frame = 0;
 446:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <frame>
 44a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <frame+0x1>
 44e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <frame+0x2>
 452:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <frame+0x3>
		}
	}
	
	ShiftOut19(frame);
 456:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <frame>
 45a:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <frame+0x1>
 45e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <frame+0x2>
 462:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <frame+0x3>
 466:	0e 94 6e 00 	call	0xdc	; 0xdc <ShiftOut19>
}
 46a:	1f 91       	pop	r17
 46c:	0f 91       	pop	r16
 46e:	ff 90       	pop	r15
 470:	ef 90       	pop	r14
 472:	df 90       	pop	r13
 474:	cf 90       	pop	r12
 476:	08 95       	ret

00000478 <main>:

int main(void)
{
	InitPorts();
 478:	0e 94 53 00 	call	0xa6	; 0xa6 <InitPorts>
	InitTimer();
 47c:	0e 94 5a 00 	call	0xb4	; 0xb4 <InitTimer>
	TIMSK1 |= (1 << OCIE1A); // Разрешить прерывание по совпадению
}

void InitSPI(void)
{
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0); // F_SPI = F_CPU/16 = 1 МГц	
 480:	81 e5       	ldi	r24, 0x51	; 81
 482:	8c bd       	out	0x2c, r24	; 44
{
	InitPorts();
	InitTimer();
	InitSPI();

	EICRA |= (1 << ISC01); // Прерывание по спаду кнопки
 484:	e9 e6       	ldi	r30, 0x69	; 105
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	80 81       	ld	r24, Z
 48a:	82 60       	ori	r24, 0x02	; 2
 48c:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);  // Разрешить прерывание INT0
 48e:	e8 9a       	sbi	0x1d, 0	; 29
	sei();                 // Разрешить глобальные прерывания
 490:	78 94       	sei
	
	while (1)
	{
		if (button_pressed)
		{
			mode = (mode + 1) % 3;
 492:	c3 e0       	ldi	r28, 0x03	; 3
 494:	d0 e0       	ldi	r29, 0x00	; 0
			button_pressed = 0;
			step = 0;    // зачистить движение
			frame = 0;   // очистить кадр
 496:	e1 2c       	mov	r14, r1
 498:	f1 2c       	mov	r15, r1
 49a:	00 e0       	ldi	r16, 0x00	; 0
 49c:	10 e0       	ldi	r17, 0x00	; 0
 49e:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <step>
 4a2:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <frame>
 4a6:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <frame+0x1>
 4aa:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <frame+0x2>
 4ae:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <frame+0x3>
	EIMSK |= (1 << INT0);  // Разрешить прерывание INT0
	sei();                 // Разрешить глобальные прерывания
	
	while (1)
	{
		if (button_pressed)
 4b2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <button_pressed>
 4b6:	88 23       	and	r24, r24
 4b8:	81 f0       	breq	.+32     	; 0x4da <main+0x62>
		{
			mode = (mode + 1) % 3;
 4ba:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <mode>
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	01 96       	adiw	r24, 0x01	; 1
 4c2:	be 01       	movw	r22, r28
 4c4:	0e 94 a2 02 	call	0x544	; 0x544 <__divmodhi4>
 4c8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <mode>
			button_pressed = 0;
 4cc:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <button_pressed>
			step = 0;    // зачистить движение
			frame = 0;   // очистить кадр
 4d0:	4e 2d       	mov	r20, r14
 4d2:	3f 2d       	mov	r19, r15
 4d4:	20 2f       	mov	r18, r16
 4d6:	91 2f       	mov	r25, r17
	{
		if (button_pressed)
		{
			mode = (mode + 1) % 3;
			button_pressed = 0;
			step = 0;    // зачистить движение
 4d8:	50 e0       	ldi	r21, 0x00	; 0
			frame = 0;   // очистить кадр
		}

		if (tick)
 4da:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <tick>
 4de:	88 23       	and	r24, r24
 4e0:	41 f3       	breq	.-48     	; 0x4b2 <main+0x3a>
		{
			tick = 0;
 4e2:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <tick>

			switch (mode)
 4e6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <mode>
 4ea:	81 30       	cpi	r24, 0x01	; 1
 4ec:	89 f0       	breq	.+34     	; 0x510 <main+0x98>
 4ee:	18 f0       	brcs	.+6      	; 0x4f6 <main+0x7e>
 4f0:	82 30       	cpi	r24, 0x02	; 2
 4f2:	d9 f0       	breq	.+54     	; 0x52a <main+0xb2>
 4f4:	de cf       	rjmp	.-68     	; 0x4b2 <main+0x3a>
 4f6:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <step>
 4fa:	40 93 05 01 	sts	0x0105, r20	; 0x800105 <frame>
 4fe:	30 93 06 01 	sts	0x0106, r19	; 0x800106 <frame+0x1>
 502:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <frame+0x2>
 506:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <frame+0x3>
			{
				case 0: Mode1_collect(); break;
 50a:	0e 94 a6 00 	call	0x14c	; 0x14c <Mode1_collect>
 50e:	c7 cf       	rjmp	.-114    	; 0x49e <main+0x26>
 510:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <step>
 514:	40 93 05 01 	sts	0x0105, r20	; 0x800105 <frame>
 518:	30 93 06 01 	sts	0x0106, r19	; 0x800106 <frame+0x1>
 51c:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <frame+0x2>
 520:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <frame+0x3>
				case 1: Mode2_tripleCollect(); break;
 524:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <Mode2_tripleCollect>
 528:	ba cf       	rjmp	.-140    	; 0x49e <main+0x26>
 52a:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <step>
 52e:	40 93 05 01 	sts	0x0105, r20	; 0x800105 <frame>
 532:	30 93 06 01 	sts	0x0106, r19	; 0x800106 <frame+0x1>
 536:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <frame+0x2>
 53a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <frame+0x3>
				case 2: Mode3_creative(); break;
 53e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <Mode3_creative>
 542:	ad cf       	rjmp	.-166    	; 0x49e <main+0x26>

00000544 <__divmodhi4>:
 544:	97 fb       	bst	r25, 7
 546:	07 2e       	mov	r0, r23
 548:	16 f4       	brtc	.+4      	; 0x54e <__divmodhi4+0xa>
 54a:	00 94       	com	r0
 54c:	07 d0       	rcall	.+14     	; 0x55c <__divmodhi4_neg1>
 54e:	77 fd       	sbrc	r23, 7
 550:	09 d0       	rcall	.+18     	; 0x564 <__divmodhi4_neg2>
 552:	0e 94 b6 02 	call	0x56c	; 0x56c <__udivmodhi4>
 556:	07 fc       	sbrc	r0, 7
 558:	05 d0       	rcall	.+10     	; 0x564 <__divmodhi4_neg2>
 55a:	3e f4       	brtc	.+14     	; 0x56a <__divmodhi4_exit>

0000055c <__divmodhi4_neg1>:
 55c:	90 95       	com	r25
 55e:	81 95       	neg	r24
 560:	9f 4f       	sbci	r25, 0xFF	; 255
 562:	08 95       	ret

00000564 <__divmodhi4_neg2>:
 564:	70 95       	com	r23
 566:	61 95       	neg	r22
 568:	7f 4f       	sbci	r23, 0xFF	; 255

0000056a <__divmodhi4_exit>:
 56a:	08 95       	ret

0000056c <__udivmodhi4>:
 56c:	aa 1b       	sub	r26, r26
 56e:	bb 1b       	sub	r27, r27
 570:	51 e1       	ldi	r21, 0x11	; 17
 572:	07 c0       	rjmp	.+14     	; 0x582 <__udivmodhi4_ep>

00000574 <__udivmodhi4_loop>:
 574:	aa 1f       	adc	r26, r26
 576:	bb 1f       	adc	r27, r27
 578:	a6 17       	cp	r26, r22
 57a:	b7 07       	cpc	r27, r23
 57c:	10 f0       	brcs	.+4      	; 0x582 <__udivmodhi4_ep>
 57e:	a6 1b       	sub	r26, r22
 580:	b7 0b       	sbc	r27, r23

00000582 <__udivmodhi4_ep>:
 582:	88 1f       	adc	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	5a 95       	dec	r21
 588:	a9 f7       	brne	.-22     	; 0x574 <__udivmodhi4_loop>
 58a:	80 95       	com	r24
 58c:	90 95       	com	r25
 58e:	bc 01       	movw	r22, r24
 590:	cd 01       	movw	r24, r26
 592:	08 95       	ret

00000594 <_exit>:
 594:	f8 94       	cli

00000596 <__stop_program>:
 596:	ff cf       	rjmp	.-2      	; 0x596 <__stop_program>
