
19ledsjump.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c8  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f1  00000000  00000000  00000bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000330  00000000  00000000  0000129d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  000015d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003aa  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fa  00000000  00000000  000019ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001ac4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  78:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <InitPorts>:
	}
}

void InitPorts(void)
{
	DDRB |= (1 << PB0) | (1 << PB1) | (1 << PB2) | (1 << PB3);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8f 60       	ori	r24, 0x0F	; 15
  84:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << PB0);  // Активируем выходы
  86:	28 98       	cbi	0x05, 0	; 5
  88:	08 95       	ret

0000008a <ShiftOut19>:
}

void ShiftOut19(uint32_t data)
{
  8a:	0f 93       	push	r16
  8c:	1f 93       	push	r17
  8e:	8b 01       	movw	r16, r22
  90:	9c 01       	movw	r18, r24
	PORTB &= ~(1 << PB1);
  92:	29 98       	cbi	0x05, 1	; 5
  94:	82 e1       	ldi	r24, 0x12	; 18
  96:	90 e0       	ldi	r25, 0x00	; 0
	
	// Отправляем 19 бит
	for (int8_t i = 18; i >= 0; i--)
	{
		PORTB &= ~(1 << PB2);
  98:	2a 98       	cbi	0x05, 2	; 5
		if (data & (1UL << i))
  9a:	b9 01       	movw	r22, r18
  9c:	a8 01       	movw	r20, r16
  9e:	08 2e       	mov	r0, r24
  a0:	04 c0       	rjmp	.+8      	; 0xaa <ShiftOut19+0x20>
  a2:	76 95       	lsr	r23
  a4:	67 95       	ror	r22
  a6:	57 95       	ror	r21
  a8:	47 95       	ror	r20
  aa:	0a 94       	dec	r0
  ac:	d2 f7       	brpl	.-12     	; 0xa2 <ShiftOut19+0x18>
  ae:	40 ff       	sbrs	r20, 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <ShiftOut19+0x2c>
		PORTB |= (1 << PB3);
  b2:	2b 9a       	sbi	0x05, 3	; 5
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <ShiftOut19+0x2e>
		else
		PORTB &= ~(1 << PB3);
  b6:	2b 98       	cbi	0x05, 3	; 5
		PORTB |= (1 << PB2);
  b8:	2a 9a       	sbi	0x05, 2	; 5
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	68 f7       	brcc	.-38     	; 0x98 <ShiftOut19+0xe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	8f e2       	ldi	r24, 0x2F	; 47
  c0:	95 e7       	ldi	r25, 0x75	; 117
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <ShiftOut19+0x38>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <ShiftOut19+0x3e>
  c8:	00 00       	nop
	}
	_delay_ms(120);
	PORTB |= (1 << PB1);
  ca:	29 9a       	sbi	0x05, 1	; 5
  cc:	1f 91       	pop	r17
  ce:	0f 91       	pop	r16
  d0:	08 95       	ret

000000d2 <main>:
void InitPorts(void);
void ShiftOut19(uint32_t data);

int main(void)
{
	InitPorts();
  d2:	0e 94 40 00 	call	0x80	; 0x80 <InitPorts>

void InitPorts(void);
void ShiftOut19(uint32_t data);

int main(void)
{
  d6:	31 2c       	mov	r3, r1
  d8:	21 2c       	mov	r2, r1
	while (1)
	{
		// Движение вперед (слева направо)
		for (uint8_t i = 0; i <= LED_COUNT - 3; i++)
		{
			ShiftOut19(1UL << i);                     // 1 светодиод
  da:	81 2c       	mov	r8, r1
  dc:	91 2c       	mov	r9, r1
  de:	54 01       	movw	r10, r8
  e0:	83 94       	inc	r8

void InitPorts(void);
void ShiftOut19(uint32_t data);

int main(void)
{
  e2:	c3 2d       	mov	r28, r3
  e4:	d2 2d       	mov	r29, r2
	while (1)
	{
		// Движение вперед (слева направо)
		for (uint8_t i = 0; i <= LED_COUNT - 3; i++)
		{
			ShiftOut19(1UL << i);                     // 1 светодиод
  e6:	24 01       	movw	r4, r8
  e8:	35 01       	movw	r6, r10
  ea:	0c 2e       	mov	r0, r28
  ec:	04 c0       	rjmp	.+8      	; 0xf6 <main+0x24>
  ee:	44 0c       	add	r4, r4
  f0:	55 1c       	adc	r5, r5
  f2:	66 1c       	adc	r6, r6
  f4:	77 1c       	adc	r7, r7
  f6:	0a 94       	dec	r0
  f8:	d2 f7       	brpl	.-12     	; 0xee <main+0x1c>
  fa:	c3 01       	movw	r24, r6
  fc:	b2 01       	movw	r22, r4
  fe:	0e 94 45 00 	call	0x8a	; 0x8a <ShiftOut19>
 102:	8e 01       	movw	r16, r28
 104:	0f 5f       	subi	r16, 0xFF	; 255
 106:	1f 4f       	sbci	r17, 0xFF	; 255
			ShiftOut19((1UL << i) | (1UL << (i+1))); // 2 светодиода
 108:	75 01       	movw	r14, r10
 10a:	64 01       	movw	r12, r8
 10c:	00 2e       	mov	r0, r16
 10e:	04 c0       	rjmp	.+8      	; 0x118 <main+0x46>
 110:	cc 0c       	add	r12, r12
 112:	dd 1c       	adc	r13, r13
 114:	ee 1c       	adc	r14, r14
 116:	ff 1c       	adc	r15, r15
 118:	0a 94       	dec	r0
 11a:	d2 f7       	brpl	.-12     	; 0x110 <main+0x3e>
 11c:	c4 28       	or	r12, r4
 11e:	d5 28       	or	r13, r5
 120:	e6 28       	or	r14, r6
 122:	f7 28       	or	r15, r7
 124:	c7 01       	movw	r24, r14
 126:	b6 01       	movw	r22, r12
 128:	0e 94 45 00 	call	0x8a	; 0x8a <ShiftOut19>
			ShiftOut19((1UL << i) | (1UL << (i+1)) | (1UL << (i+2))); // 3 светодиода
 12c:	22 96       	adiw	r28, 0x02	; 2
 12e:	d5 01       	movw	r26, r10
 130:	c4 01       	movw	r24, r8
 132:	04 c0       	rjmp	.+8      	; 0x13c <main+0x6a>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	aa 1f       	adc	r26, r26
 13a:	bb 1f       	adc	r27, r27
 13c:	ca 95       	dec	r28
 13e:	d2 f7       	brpl	.-12     	; 0x134 <main+0x62>
 140:	bc 01       	movw	r22, r24
 142:	cd 01       	movw	r24, r26
 144:	6c 29       	or	r22, r12
 146:	7d 29       	or	r23, r13
 148:	8e 29       	or	r24, r14
 14a:	9f 29       	or	r25, r15
 14c:	0e 94 45 00 	call	0x8a	; 0x8a <ShiftOut19>
			ShiftOut19((1UL << i) | (1UL << (i+1))); // 2 светодиода
 150:	c7 01       	movw	r24, r14
 152:	b6 01       	movw	r22, r12
 154:	0e 94 45 00 	call	0x8a	; 0x8a <ShiftOut19>
			ShiftOut19(1UL << i);                     // 1 светодиод
 158:	c3 01       	movw	r24, r6
 15a:	b2 01       	movw	r22, r4
 15c:	0e 94 45 00 	call	0x8a	; 0x8a <ShiftOut19>
 160:	e8 01       	movw	r28, r16
	InitPorts();
	
	while (1)
	{
		// Движение вперед (слева направо)
		for (uint8_t i = 0; i <= LED_COUNT - 3; i++)
 162:	01 31       	cpi	r16, 0x11	; 17
 164:	11 05       	cpc	r17, r1
 166:	09 f0       	breq	.+2      	; 0x16a <main+0x98>
 168:	be cf       	rjmp	.-132    	; 0xe6 <main+0x14>
 16a:	c0 e1       	ldi	r28, 0x10	; 16
 16c:	d0 e0       	ldi	r29, 0x00	; 0
		}

		// Движение назад (справа налево)
		for (uint8_t i = LED_COUNT - 3; i > 0; i--)
		{
			ShiftOut19(1UL << i);
 16e:	24 01       	movw	r4, r8
 170:	35 01       	movw	r6, r10
 172:	0c 2e       	mov	r0, r28
 174:	04 c0       	rjmp	.+8      	; 0x17e <main+0xac>
 176:	44 0c       	add	r4, r4
 178:	55 1c       	adc	r5, r5
 17a:	66 1c       	adc	r6, r6
 17c:	77 1c       	adc	r7, r7
 17e:	0a 94       	dec	r0
 180:	d2 f7       	brpl	.-12     	; 0x176 <main+0xa4>
 182:	c3 01       	movw	r24, r6
 184:	b2 01       	movw	r22, r4
 186:	0e 94 45 00 	call	0x8a	; 0x8a <ShiftOut19>
			ShiftOut19((1UL << i) | (1UL << (i+1)));
 18a:	ce 01       	movw	r24, r28
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	75 01       	movw	r14, r10
 190:	64 01       	movw	r12, r8
 192:	04 c0       	rjmp	.+8      	; 0x19c <main+0xca>
 194:	cc 0c       	add	r12, r12
 196:	dd 1c       	adc	r13, r13
 198:	ee 1c       	adc	r14, r14
 19a:	ff 1c       	adc	r15, r15
 19c:	8a 95       	dec	r24
 19e:	d2 f7       	brpl	.-12     	; 0x194 <main+0xc2>
 1a0:	c4 28       	or	r12, r4
 1a2:	d5 28       	or	r13, r5
 1a4:	e6 28       	or	r14, r6
 1a6:	f7 28       	or	r15, r7
 1a8:	c7 01       	movw	r24, r14
 1aa:	b6 01       	movw	r22, r12
 1ac:	0e 94 45 00 	call	0x8a	; 0x8a <ShiftOut19>
			ShiftOut19((1UL << i) | (1UL << (i+1)) | (1UL << (i+2)));
 1b0:	ce 01       	movw	r24, r28
 1b2:	02 96       	adiw	r24, 0x02	; 2
 1b4:	a5 01       	movw	r20, r10
 1b6:	94 01       	movw	r18, r8
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <main+0xf0>
 1ba:	22 0f       	add	r18, r18
 1bc:	33 1f       	adc	r19, r19
 1be:	44 1f       	adc	r20, r20
 1c0:	55 1f       	adc	r21, r21
 1c2:	8a 95       	dec	r24
 1c4:	d2 f7       	brpl	.-12     	; 0x1ba <main+0xe8>
 1c6:	ca 01       	movw	r24, r20
 1c8:	b9 01       	movw	r22, r18
 1ca:	6c 29       	or	r22, r12
 1cc:	7d 29       	or	r23, r13
 1ce:	8e 29       	or	r24, r14
 1d0:	9f 29       	or	r25, r15
 1d2:	0e 94 45 00 	call	0x8a	; 0x8a <ShiftOut19>
			ShiftOut19((1UL << i) | (1UL << (i+1)));
 1d6:	c7 01       	movw	r24, r14
 1d8:	b6 01       	movw	r22, r12
 1da:	0e 94 45 00 	call	0x8a	; 0x8a <ShiftOut19>
			ShiftOut19(1UL << i);
 1de:	c3 01       	movw	r24, r6
 1e0:	b2 01       	movw	r22, r4
 1e2:	0e 94 45 00 	call	0x8a	; 0x8a <ShiftOut19>
 1e6:	21 97       	sbiw	r28, 0x01	; 1
			ShiftOut19((1UL << i) | (1UL << (i+1))); // 2 светодиода
			ShiftOut19(1UL << i);                     // 1 светодиод
		}

		// Движение назад (справа налево)
		for (uint8_t i = LED_COUNT - 3; i > 0; i--)
 1e8:	11 f6       	brne	.-124    	; 0x16e <main+0x9c>
 1ea:	7b cf       	rjmp	.-266    	; 0xe2 <main+0x10>

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
