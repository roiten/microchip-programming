
19leds_collect.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000082b  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ea  00000000  00000000  00000a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f9  00000000  00000000  00001165  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00001460  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b7  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000018c  00000000  00000000  00001867  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000019f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  78:	0c 94 ab 00 	jmp	0x156	; 0x156 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <InitPorts>:
	}
}

void InitPorts(void)
{
	DDRB |= (1 << PB0) | (1 << PB1) | (1 << PB2) | (1 << PB3);  // PB3 = DS (данные)
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8f 60       	ori	r24, 0x0F	; 15
  84:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << PB0);  // OE = LOW (включить выходы)
  86:	28 98       	cbi	0x05, 0	; 5
  88:	08 95       	ret

0000008a <ShiftOut24>:
}

void ShiftOut24(uint32_t data)
{
  8a:	0f 93       	push	r16
  8c:	1f 93       	push	r17
  8e:	8b 01       	movw	r16, r22
  90:	9c 01       	movw	r18, r24
	PORTB &= ~(1 << PB1);  // ST_CP = LOW
  92:	29 98       	cbi	0x05, 1	; 5
  94:	87 e1       	ldi	r24, 0x17	; 23
  96:	90 e0       	ldi	r25, 0x00	; 0
	
	// Отправляем 24 бита (старший бит first)
	for (int8_t i = 23; i >= 0; i--)
	{
		PORTB &= ~(1 << PB2);  // SH_CP = LOW
  98:	2a 98       	cbi	0x05, 2	; 5
		
		if (data & (1UL << i))
  9a:	b9 01       	movw	r22, r18
  9c:	a8 01       	movw	r20, r16
  9e:	08 2e       	mov	r0, r24
  a0:	04 c0       	rjmp	.+8      	; 0xaa <ShiftOut24+0x20>
  a2:	76 95       	lsr	r23
  a4:	67 95       	ror	r22
  a6:	57 95       	ror	r21
  a8:	47 95       	ror	r20
  aa:	0a 94       	dec	r0
  ac:	d2 f7       	brpl	.-12     	; 0xa2 <ShiftOut24+0x18>
  ae:	40 ff       	sbrs	r20, 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <ShiftOut24+0x2c>
		PORTB |= (1 << PB3);   // DS = HIGH
  b2:	2b 9a       	sbi	0x05, 3	; 5
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <ShiftOut24+0x2e>
		else
		PORTB &= ~(1 << PB3);  // DS = LOW
  b6:	2b 98       	cbi	0x05, 3	; 5
		
		PORTB |= (1 << PB2);  // SH_CP = HIGH
  b8:	2a 9a       	sbi	0x05, 2	; 5
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	68 f7       	brcc	.-38     	; 0x98 <ShiftOut24+0xe>
	}
	
	PORTB |= (1 << PB1);  // ST_CP = HIGH (защёлка)
  be:	29 9a       	sbi	0x05, 1	; 5
  c0:	1f 91       	pop	r17
  c2:	0f 91       	pop	r16
  c4:	08 95       	ret

000000c6 <main>:
void InitPorts(void);
void ShiftOut24(uint32_t data);  // 24 бита (3 регистра)

int main(void)
{
	InitPorts();
  c6:	0e 94 40 00 	call	0x80	; 0x80 <InitPorts>
	{
		uint32_t mask = (0b0000000000000000000);
		// Бегущий бит влево (19 бит)
		for (uint8_t i = 0; i < 19; i++)
		{
			mask |= (1UL << i);
  ca:	81 2c       	mov	r8, r1
  cc:	91 2c       	mov	r9, r1
  ce:	54 01       	movw	r10, r8
  d0:	83 94       	inc	r8

void InitPorts(void);
void ShiftOut24(uint32_t data);  // 24 бита (3 регистра)

int main(void)
{
  d2:	c0 e0       	ldi	r28, 0x00	; 0
  d4:	d0 e0       	ldi	r29, 0x00	; 0
	InitPorts();
	
	while (1)
	{
		uint32_t mask = (0b0000000000000000000);
  d6:	c1 2c       	mov	r12, r1
  d8:	d1 2c       	mov	r13, r1
  da:	76 01       	movw	r14, r12
		// Бегущий бит влево (19 бит)
		for (uint8_t i = 0; i < 19; i++)
		{
			mask |= (1UL << i);
  dc:	d5 01       	movw	r26, r10
  de:	c4 01       	movw	r24, r8
  e0:	0c 2e       	mov	r0, r28
  e2:	04 c0       	rjmp	.+8      	; 0xec <main+0x26>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	aa 1f       	adc	r26, r26
  ea:	bb 1f       	adc	r27, r27
  ec:	0a 94       	dec	r0
  ee:	d2 f7       	brpl	.-12     	; 0xe4 <main+0x1e>
  f0:	c8 2a       	or	r12, r24
  f2:	d9 2a       	or	r13, r25
  f4:	ea 2a       	or	r14, r26
  f6:	fb 2a       	or	r15, r27
			ShiftOut24(mask);
  f8:	c7 01       	movw	r24, r14
  fa:	b6 01       	movw	r22, r12
  fc:	0e 94 45 00 	call	0x8a	; 0x8a <ShiftOut24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	87 ea       	ldi	r24, 0xA7	; 167
 102:	91 e6       	ldi	r25, 0x61	; 97
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <main+0x3e>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x44>
 10a:	00 00       	nop
 10c:	21 96       	adiw	r28, 0x01	; 1
	
	while (1)
	{
		uint32_t mask = (0b0000000000000000000);
		// Бегущий бит влево (19 бит)
		for (uint8_t i = 0; i < 19; i++)
 10e:	c3 31       	cpi	r28, 0x13	; 19
 110:	d1 05       	cpc	r29, r1
 112:	21 f7       	brne	.-56     	; 0xdc <main+0x16>
 114:	c2 e1       	ldi	r28, 0x12	; 18
 116:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
		// Бегущий бит вправо (19 бит)
		for (uint8_t i = 0; i < 19; i++)
		{
			mask &= ~(1UL << (18 - i)); 
 118:	d5 01       	movw	r26, r10
 11a:	c4 01       	movw	r24, r8
 11c:	0c 2e       	mov	r0, r28
 11e:	04 c0       	rjmp	.+8      	; 0x128 <main+0x62>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	aa 1f       	adc	r26, r26
 126:	bb 1f       	adc	r27, r27
 128:	0a 94       	dec	r0
 12a:	d2 f7       	brpl	.-12     	; 0x120 <main+0x5a>
 12c:	80 95       	com	r24
 12e:	90 95       	com	r25
 130:	a0 95       	com	r26
 132:	b0 95       	com	r27
 134:	c8 22       	and	r12, r24
 136:	d9 22       	and	r13, r25
 138:	ea 22       	and	r14, r26
 13a:	fb 22       	and	r15, r27
			ShiftOut24(mask);  // Сдвиг в обратном направлении
 13c:	c7 01       	movw	r24, r14
 13e:	b6 01       	movw	r22, r12
 140:	0e 94 45 00 	call	0x8a	; 0x8a <ShiftOut24>
 144:	87 ea       	ldi	r24, 0xA7	; 167
 146:	91 e6       	ldi	r25, 0x61	; 97
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <main+0x82>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0x88>
 14e:	00 00       	nop
 150:	21 97       	sbiw	r28, 0x01	; 1
 152:	10 f7       	brcc	.-60     	; 0x118 <main+0x52>
 154:	be cf       	rjmp	.-132    	; 0xd2 <main+0xc>

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
