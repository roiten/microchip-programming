
leds19_creative.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000724  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000724  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000754  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bbb  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000734  00000000  00000000  000013b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000590  00000000  00000000  00001aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  0000207c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000437  00000000  00000000  00002210  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000078d  00000000  00000000  00002647  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002dd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 01 03 	call	0x602	; 0x602 <main>
  88:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <InitPorts>:
volatile uint8_t mode = 0;
volatile uint8_t tick = 0;  // Флаг, срабатывающий раз в 250 мс
volatile uint8_t button_pressed = 0;

void InitPorts(void) {
	DDRB |= (1 << PB0) | (1 << PB1) | (1 << PB2) | (1 << PB3);
  90:	84 b1       	in	r24, 0x04	; 4
  92:	8f 60       	ori	r24, 0x0F	; 15
  94:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << PB0);  // Активируем выходы (OE = 0)
  96:	28 98       	cbi	0x05, 0	; 5
	
	DDRD &= ~(1 << PIND2); // PIND2 - кнопка
  98:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1 << PIND2); // подтяжка к питанию
  9a:	5a 9a       	sbi	0x0b, 2	; 11
  9c:	08 95       	ret

0000009e <InitTimer>:
}

void InitTimer(void) {
	TCCR1B |= (1 << WGM12);               // CTC режим
  9e:	e1 e8       	ldi	r30, 0x81	; 129
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	88 60       	ori	r24, 0x08	; 8
  a6:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS12) | (1 << CS10);  // делитель 1024
  a8:	80 81       	ld	r24, Z
  aa:	85 60       	ori	r24, 0x05	; 5
  ac:	80 83       	st	Z, r24
	OCR1A = 244;                          // сравнение каждые 250 мс (при 1 МГц и 1024 делителе)
  ae:	84 ef       	ldi	r24, 0xF4	; 244
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  b6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 |= (1 << OCIE1A);              // разрешить прерывание
  ba:	ef e6       	ldi	r30, 0x6F	; 111
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	82 60       	ori	r24, 0x02	; 2
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <WaitTick>:
	WaitTick();
	PORTB |= (1 << PB1);  // ST_CP = 1 (защелкиваем данные)
}

void WaitTick(void) {
	while (!tick);
  c6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tick>
  ca:	88 23       	and	r24, r24
  cc:	e1 f3       	breq	.-8      	; 0xc6 <WaitTick>
	tick = 0;
  ce:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <tick>
  d2:	08 95       	ret

000000d4 <ShiftOut19>:
	OCR1A = 244;                          // сравнение каждые 250 мс (при 1 МГц и 1024 делителе)
	TIMSK1 |= (1 << OCIE1A);              // разрешить прерывание
}

// Вывод 19-битного числа на светодиоды
void ShiftOut19(uint32_t data) {
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	8b 01       	movw	r16, r22
  da:	9c 01       	movw	r18, r24
	PORTB &= ~(1 << PB1);  // ST_CP = 0
  dc:	29 98       	cbi	0x05, 1	; 5
  de:	82 e1       	ldi	r24, 0x12	; 18
  e0:	90 e0       	ldi	r25, 0x00	; 0
	
	// Отправляем 19 бит
	for (int8_t i = 18; i >= 0; i--) {
		PORTB &= ~(1 << PB2);  // SH_CP = 0
  e2:	2a 98       	cbi	0x05, 2	; 5
		
		if (data & (1UL << i))
  e4:	b9 01       	movw	r22, r18
  e6:	a8 01       	movw	r20, r16
  e8:	08 2e       	mov	r0, r24
  ea:	04 c0       	rjmp	.+8      	; 0xf4 <ShiftOut19+0x20>
  ec:	76 95       	lsr	r23
  ee:	67 95       	ror	r22
  f0:	57 95       	ror	r21
  f2:	47 95       	ror	r20
  f4:	0a 94       	dec	r0
  f6:	d2 f7       	brpl	.-12     	; 0xec <ShiftOut19+0x18>
  f8:	40 ff       	sbrs	r20, 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <ShiftOut19+0x2c>
		PORTB |= (1 << PB3);   // DS = 1
  fc:	2b 9a       	sbi	0x05, 3	; 5
  fe:	01 c0       	rjmp	.+2      	; 0x102 <ShiftOut19+0x2e>
		else
		PORTB &= ~(1 << PB3);  // DS = 0
 100:	2b 98       	cbi	0x05, 3	; 5
		
		PORTB |= (1 << PB2);  // SH_CP = 1
 102:	2a 9a       	sbi	0x05, 2	; 5
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	68 f7       	brcc	.-38     	; 0xe2 <ShiftOut19+0xe>
	}
	WaitTick();
 108:	0e 94 63 00 	call	0xc6	; 0xc6 <WaitTick>
	PORTB |= (1 << PB1);  // ST_CP = 1 (защелкиваем данные)
 10c:	29 9a       	sbi	0x05, 1	; 5
}
 10e:	1f 91       	pop	r17
 110:	0f 91       	pop	r16
 112:	08 95       	ret

00000114 <__vector_1>:
	while (!tick);
	tick = 0;
}

// Обработчик прерывания INT0 (кнопка на PIND2)
ISR(INT0_vect) {
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	8f 93       	push	r24
	button_pressed = 1;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 126:	8f 91       	pop	r24
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <__vector_11>:

ISR(TIMER1_COMPA_vect) {
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
	tick = 1;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tick>
}
 144:	8f 91       	pop	r24
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <Mode1_collect>:

void Mode1_collect(void) {
 150:	cf 92       	push	r12
 152:	df 92       	push	r13
 154:	ef 92       	push	r14
 156:	ff 92       	push	r15
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
	uint32_t frame;
	
	for (uint8_t i = 0; i < LED_COUNT; i++) {
		if (button_pressed) return;
 15c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 160:	88 23       	and	r24, r24
 162:	d1 f1       	breq	.+116    	; 0x1d8 <Mode1_collect+0x88>
 164:	46 c0       	rjmp	.+140    	; 0x1f2 <Mode1_collect+0xa2>
 166:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 16a:	81 11       	cpse	r24, r1
 16c:	42 c0       	rjmp	.+132    	; 0x1f2 <Mode1_collect+0xa2>
		frame = (1UL << i);
		ShiftOut19(frame);
 16e:	c7 01       	movw	r24, r14
 170:	b6 01       	movw	r22, r12
 172:	0c 2e       	mov	r0, r28
 174:	04 c0       	rjmp	.+8      	; 0x17e <Mode1_collect+0x2e>
 176:	66 0f       	add	r22, r22
 178:	77 1f       	adc	r23, r23
 17a:	88 1f       	adc	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	0a 94       	dec	r0
 180:	d2 f7       	brpl	.-12     	; 0x176 <Mode1_collect+0x26>
 182:	0e 94 6a 00 	call	0xd4	; 0xd4 <ShiftOut19>
 186:	21 96       	adiw	r28, 0x01	; 1
}

void Mode1_collect(void) {
	uint32_t frame;
	
	for (uint8_t i = 0; i < LED_COUNT; i++) {
 188:	c3 31       	cpi	r28, 0x13	; 19
 18a:	d1 05       	cpc	r29, r1
 18c:	61 f7       	brne	.-40     	; 0x166 <Mode1_collect+0x16>
		if (button_pressed) return;
		frame = (1UL << i);
		ShiftOut19(frame);
	}
	for (uint8_t i = 0; i < LED_COUNT; i++) {
		if (button_pressed) return;
 18e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 192:	88 23       	and	r24, r24
 194:	a1 f0       	breq	.+40     	; 0x1be <Mode1_collect+0x6e>
 196:	2d c0       	rjmp	.+90     	; 0x1f2 <Mode1_collect+0xa2>
 198:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 19c:	81 11       	cpse	r24, r1
 19e:	29 c0       	rjmp	.+82     	; 0x1f2 <Mode1_collect+0xa2>
		frame = (1UL << (18 - i));
		ShiftOut19(frame);
 1a0:	c7 01       	movw	r24, r14
 1a2:	b6 01       	movw	r22, r12
 1a4:	0c 2e       	mov	r0, r28
 1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <Mode1_collect+0x60>
 1a8:	66 0f       	add	r22, r22
 1aa:	77 1f       	adc	r23, r23
 1ac:	88 1f       	adc	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	0a 94       	dec	r0
 1b2:	d2 f7       	brpl	.-12     	; 0x1a8 <Mode1_collect+0x58>
 1b4:	0e 94 6a 00 	call	0xd4	; 0xd4 <ShiftOut19>
 1b8:	21 97       	sbiw	r28, 0x01	; 1
 1ba:	70 f7       	brcc	.-36     	; 0x198 <Mode1_collect+0x48>
 1bc:	1a c0       	rjmp	.+52     	; 0x1f2 <Mode1_collect+0xa2>
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	84 e0       	ldi	r24, 0x04	; 4
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 6a 00 	call	0xd4	; 0xd4 <ShiftOut19>
 1ca:	c1 e1       	ldi	r28, 0x11	; 17
 1cc:	d0 e0       	ldi	r29, 0x00	; 0
 1ce:	c1 2c       	mov	r12, r1
 1d0:	d1 2c       	mov	r13, r1
 1d2:	76 01       	movw	r14, r12
 1d4:	c3 94       	inc	r12
 1d6:	e0 cf       	rjmp	.-64     	; 0x198 <Mode1_collect+0x48>
	uint32_t frame;
	
	for (uint8_t i = 0; i < LED_COUNT; i++) {
		if (button_pressed) return;
		frame = (1UL << i);
		ShiftOut19(frame);
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 6a 00 	call	0xd4	; 0xd4 <ShiftOut19>
 1e4:	c1 e0       	ldi	r28, 0x01	; 1
 1e6:	d0 e0       	ldi	r29, 0x00	; 0
 1e8:	c1 2c       	mov	r12, r1
 1ea:	d1 2c       	mov	r13, r1
 1ec:	76 01       	movw	r14, r12
 1ee:	c3 94       	inc	r12
 1f0:	ba cf       	rjmp	.-140    	; 0x166 <Mode1_collect+0x16>
	for (uint8_t i = 0; i < LED_COUNT; i++) {
		if (button_pressed) return;
		frame = (1UL << (18 - i));
		ShiftOut19(frame);
	}
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	ff 90       	pop	r15
 1f8:	ef 90       	pop	r14
 1fa:	df 90       	pop	r13
 1fc:	cf 90       	pop	r12
 1fe:	08 95       	ret

00000200 <Mode2_tripleCollect>:

void Mode2_tripleCollect(void) {
 200:	4f 92       	push	r4
 202:	5f 92       	push	r5
 204:	6f 92       	push	r6
 206:	7f 92       	push	r7
 208:	8f 92       	push	r8
 20a:	9f 92       	push	r9
 20c:	af 92       	push	r10
 20e:	bf 92       	push	r11
 210:	cf 92       	push	r12
 212:	df 92       	push	r13
 214:	ef 92       	push	r14
 216:	ff 92       	push	r15
 218:	0f 93       	push	r16
 21a:	1f 93       	push	r17
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	00 d0       	rcall	.+0      	; 0x222 <Mode2_tripleCollect+0x22>
 222:	00 d0       	rcall	.+0      	; 0x224 <Mode2_tripleCollect+0x24>
 224:	00 d0       	rcall	.+0      	; 0x226 <Mode2_tripleCollect+0x26>
 226:	cd b7       	in	r28, 0x3d	; 61
 228:	de b7       	in	r29, 0x3e	; 62
	uint32_t frame;

	for (uint8_t i = 0; i <= LED_COUNT - 3; i++) {
		if (button_pressed) return;
 22a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 22e:	81 11       	cpse	r24, r1
 230:	0c c1       	rjmp	.+536    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 232:	1e 82       	std	Y+6, r1	; 0x06
 234:	1d 82       	std	Y+5, r1	; 0x05
		frame = (1UL << i);
 236:	41 2c       	mov	r4, r1
 238:	51 2c       	mov	r5, r1
 23a:	32 01       	movw	r6, r4
 23c:	43 94       	inc	r4
 23e:	06 c0       	rjmp	.+12     	; 0x24c <Mode2_tripleCollect+0x4c>

void Mode2_tripleCollect(void) {
	uint32_t frame;

	for (uint8_t i = 0; i <= LED_COUNT - 3; i++) {
		if (button_pressed) return;
 240:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 244:	1e 83       	std	Y+6, r17	; 0x06
 246:	0d 83       	std	Y+5, r16	; 0x05
 248:	81 11       	cpse	r24, r1
 24a:	ff c0       	rjmp	.+510    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		frame = (1UL << i);
 24c:	73 01       	movw	r14, r6
 24e:	62 01       	movw	r12, r4
 250:	0d 80       	ldd	r0, Y+5	; 0x05
 252:	04 c0       	rjmp	.+8      	; 0x25c <Mode2_tripleCollect+0x5c>
 254:	cc 0c       	add	r12, r12
 256:	dd 1c       	adc	r13, r13
 258:	ee 1c       	adc	r14, r14
 25a:	ff 1c       	adc	r15, r15
 25c:	0a 94       	dec	r0
 25e:	d2 f7       	brpl	.-12     	; 0x254 <Mode2_tripleCollect+0x54>
		ShiftOut19(frame);
 260:	c7 01       	movw	r24, r14
 262:	b6 01       	movw	r22, r12
 264:	0e 94 6a 00 	call	0xd4	; 0xd4 <ShiftOut19>

		if (button_pressed) return;
 268:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 26c:	81 11       	cpse	r24, r1
 26e:	ed c0       	rjmp	.+474    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 270:	0d 81       	ldd	r16, Y+5	; 0x05
 272:	1e 81       	ldd	r17, Y+6	; 0x06
 274:	0f 5f       	subi	r16, 0xFF	; 255
 276:	1f 4f       	sbci	r17, 0xFF	; 255
		frame |= (1UL << (i + 1));
 278:	53 01       	movw	r10, r6
 27a:	42 01       	movw	r8, r4
 27c:	00 2e       	mov	r0, r16
 27e:	04 c0       	rjmp	.+8      	; 0x288 <Mode2_tripleCollect+0x88>
 280:	88 0c       	add	r8, r8
 282:	99 1c       	adc	r9, r9
 284:	aa 1c       	adc	r10, r10
 286:	bb 1c       	adc	r11, r11
 288:	0a 94       	dec	r0
 28a:	d2 f7       	brpl	.-12     	; 0x280 <Mode2_tripleCollect+0x80>
 28c:	d7 01       	movw	r26, r14
 28e:	c6 01       	movw	r24, r12
 290:	88 29       	or	r24, r8
 292:	99 29       	or	r25, r9
 294:	aa 29       	or	r26, r10
 296:	bb 29       	or	r27, r11
 298:	89 83       	std	Y+1, r24	; 0x01
 29a:	9a 83       	std	Y+2, r25	; 0x02
 29c:	ab 83       	std	Y+3, r26	; 0x03
 29e:	bc 83       	std	Y+4, r27	; 0x04
		ShiftOut19(frame);
 2a0:	bc 01       	movw	r22, r24
 2a2:	cd 01       	movw	r24, r26
 2a4:	0e 94 6a 00 	call	0xd4	; 0xd4 <ShiftOut19>

		if (button_pressed) return;
 2a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2ac:	81 11       	cpse	r24, r1
 2ae:	cd c0       	rjmp	.+410    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		frame |= (1UL << (i + 2));
 2b0:	8d 81       	ldd	r24, Y+5	; 0x05
 2b2:	9e 81       	ldd	r25, Y+6	; 0x06
 2b4:	02 96       	adiw	r24, 0x02	; 2
 2b6:	73 01       	movw	r14, r6
 2b8:	62 01       	movw	r12, r4
 2ba:	04 c0       	rjmp	.+8      	; 0x2c4 <Mode2_tripleCollect+0xc4>
 2bc:	cc 0c       	add	r12, r12
 2be:	dd 1c       	adc	r13, r13
 2c0:	ee 1c       	adc	r14, r14
 2c2:	ff 1c       	adc	r15, r15
 2c4:	8a 95       	dec	r24
 2c6:	d2 f7       	brpl	.-12     	; 0x2bc <Mode2_tripleCollect+0xbc>
 2c8:	89 81       	ldd	r24, Y+1	; 0x01
 2ca:	9a 81       	ldd	r25, Y+2	; 0x02
 2cc:	ab 81       	ldd	r26, Y+3	; 0x03
 2ce:	bc 81       	ldd	r27, Y+4	; 0x04
 2d0:	8c 29       	or	r24, r12
 2d2:	9d 29       	or	r25, r13
 2d4:	ae 29       	or	r26, r14
 2d6:	bf 29       	or	r27, r15
 2d8:	89 83       	std	Y+1, r24	; 0x01
 2da:	9a 83       	std	Y+2, r25	; 0x02
 2dc:	ab 83       	std	Y+3, r26	; 0x03
 2de:	bc 83       	std	Y+4, r27	; 0x04
		ShiftOut19(frame);
 2e0:	bc 01       	movw	r22, r24
 2e2:	cd 01       	movw	r24, r26
 2e4:	0e 94 6a 00 	call	0xd4	; 0xd4 <ShiftOut19>

		if (button_pressed) return;
 2e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2ec:	81 11       	cpse	r24, r1
 2ee:	ad c0       	rjmp	.+346    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		frame &= ~(1UL << (i + 2));
 2f0:	c0 94       	com	r12
 2f2:	d0 94       	com	r13
 2f4:	e0 94       	com	r14
 2f6:	f0 94       	com	r15
 2f8:	89 81       	ldd	r24, Y+1	; 0x01
 2fa:	9a 81       	ldd	r25, Y+2	; 0x02
 2fc:	ab 81       	ldd	r26, Y+3	; 0x03
 2fe:	bc 81       	ldd	r27, Y+4	; 0x04
 300:	c8 22       	and	r12, r24
 302:	d9 22       	and	r13, r25
 304:	ea 22       	and	r14, r26
 306:	fb 22       	and	r15, r27
		ShiftOut19(frame);
 308:	c7 01       	movw	r24, r14
 30a:	b6 01       	movw	r22, r12
 30c:	0e 94 6a 00 	call	0xd4	; 0xd4 <ShiftOut19>

		if (button_pressed) return;
 310:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 314:	81 11       	cpse	r24, r1
 316:	99 c0       	rjmp	.+306    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		frame &= ~(1UL << (i + 1));
		ShiftOut19(frame);
 318:	80 94       	com	r8
 31a:	90 94       	com	r9
 31c:	a0 94       	com	r10
 31e:	b0 94       	com	r11
 320:	c5 01       	movw	r24, r10
 322:	b4 01       	movw	r22, r8
 324:	6c 21       	and	r22, r12
 326:	7d 21       	and	r23, r13
 328:	8e 21       	and	r24, r14
 32a:	9f 21       	and	r25, r15
 32c:	0e 94 6a 00 	call	0xd4	; 0xd4 <ShiftOut19>
}

void Mode2_tripleCollect(void) {
	uint32_t frame;

	for (uint8_t i = 0; i <= LED_COUNT - 3; i++) {
 330:	ad 81       	ldd	r26, Y+5	; 0x05
 332:	be 81       	ldd	r27, Y+6	; 0x06
 334:	50 97       	sbiw	r26, 0x10	; 16
 336:	09 f0       	breq	.+2      	; 0x33a <Mode2_tripleCollect+0x13a>
 338:	83 cf       	rjmp	.-250    	; 0x240 <Mode2_tripleCollect+0x40>
		frame &= ~(1UL << (i + 1));
		ShiftOut19(frame);
	}

	for (int8_t i = LED_COUNT - 3; i > 0; i--) {
		if (button_pressed) return;
 33a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 33e:	81 11       	cpse	r24, r1
 340:	84 c0       	rjmp	.+264    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		frame = (1UL << i);
 342:	41 2c       	mov	r4, r1
 344:	51 2c       	mov	r5, r1
 346:	32 01       	movw	r6, r4
 348:	43 94       	inc	r4
 34a:	0a c0       	rjmp	.+20     	; 0x360 <Mode2_tripleCollect+0x160>
		frame &= ~(1UL << (i + 1));
		ShiftOut19(frame);
	}

	for (int8_t i = LED_COUNT - 3; i > 0; i--) {
		if (button_pressed) return;
 34c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 350:	2d 81       	ldd	r18, Y+5	; 0x05
 352:	3e 81       	ldd	r19, Y+6	; 0x06
 354:	21 50       	subi	r18, 0x01	; 1
 356:	31 09       	sbc	r19, r1
 358:	3e 83       	std	Y+6, r19	; 0x06
 35a:	2d 83       	std	Y+5, r18	; 0x05
 35c:	81 11       	cpse	r24, r1
 35e:	75 c0       	rjmp	.+234    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		frame = (1UL << i);
 360:	73 01       	movw	r14, r6
 362:	62 01       	movw	r12, r4
 364:	0d 80       	ldd	r0, Y+5	; 0x05
 366:	04 c0       	rjmp	.+8      	; 0x370 <Mode2_tripleCollect+0x170>
 368:	cc 0c       	add	r12, r12
 36a:	dd 1c       	adc	r13, r13
 36c:	ee 1c       	adc	r14, r14
 36e:	ff 1c       	adc	r15, r15
 370:	0a 94       	dec	r0
 372:	d2 f7       	brpl	.-12     	; 0x368 <Mode2_tripleCollect+0x168>
		ShiftOut19(frame);
 374:	c7 01       	movw	r24, r14
 376:	b6 01       	movw	r22, r12
 378:	0e 94 6a 00 	call	0xd4	; 0xd4 <ShiftOut19>

		if (button_pressed) return;
 37c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 380:	81 11       	cpse	r24, r1
 382:	63 c0       	rjmp	.+198    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		frame |= (1UL << (i + 1));
 384:	8d 81       	ldd	r24, Y+5	; 0x05
 386:	9e 81       	ldd	r25, Y+6	; 0x06
 388:	01 96       	adiw	r24, 0x01	; 1
 38a:	53 01       	movw	r10, r6
 38c:	42 01       	movw	r8, r4
 38e:	04 c0       	rjmp	.+8      	; 0x398 <Mode2_tripleCollect+0x198>
 390:	88 0c       	add	r8, r8
 392:	99 1c       	adc	r9, r9
 394:	aa 1c       	adc	r10, r10
 396:	bb 1c       	adc	r11, r11
 398:	8a 95       	dec	r24
 39a:	d2 f7       	brpl	.-12     	; 0x390 <Mode2_tripleCollect+0x190>
 39c:	d7 01       	movw	r26, r14
 39e:	c6 01       	movw	r24, r12
 3a0:	88 29       	or	r24, r8
 3a2:	99 29       	or	r25, r9
 3a4:	aa 29       	or	r26, r10
 3a6:	bb 29       	or	r27, r11
 3a8:	89 83       	std	Y+1, r24	; 0x01
 3aa:	9a 83       	std	Y+2, r25	; 0x02
 3ac:	ab 83       	std	Y+3, r26	; 0x03
 3ae:	bc 83       	std	Y+4, r27	; 0x04
		ShiftOut19(frame);
 3b0:	bc 01       	movw	r22, r24
 3b2:	cd 01       	movw	r24, r26
 3b4:	0e 94 6a 00 	call	0xd4	; 0xd4 <ShiftOut19>

		if (button_pressed) return;
 3b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 3bc:	81 11       	cpse	r24, r1
 3be:	45 c0       	rjmp	.+138    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		frame |= (1UL << (i + 2));
 3c0:	8d 81       	ldd	r24, Y+5	; 0x05
 3c2:	9e 81       	ldd	r25, Y+6	; 0x06
 3c4:	02 96       	adiw	r24, 0x02	; 2
 3c6:	73 01       	movw	r14, r6
 3c8:	62 01       	movw	r12, r4
 3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <Mode2_tripleCollect+0x1d4>
 3cc:	cc 0c       	add	r12, r12
 3ce:	dd 1c       	adc	r13, r13
 3d0:	ee 1c       	adc	r14, r14
 3d2:	ff 1c       	adc	r15, r15
 3d4:	8a 95       	dec	r24
 3d6:	d2 f7       	brpl	.-12     	; 0x3cc <Mode2_tripleCollect+0x1cc>
 3d8:	89 81       	ldd	r24, Y+1	; 0x01
 3da:	9a 81       	ldd	r25, Y+2	; 0x02
 3dc:	ab 81       	ldd	r26, Y+3	; 0x03
 3de:	bc 81       	ldd	r27, Y+4	; 0x04
 3e0:	8c 29       	or	r24, r12
 3e2:	9d 29       	or	r25, r13
 3e4:	ae 29       	or	r26, r14
 3e6:	bf 29       	or	r27, r15
 3e8:	89 83       	std	Y+1, r24	; 0x01
 3ea:	9a 83       	std	Y+2, r25	; 0x02
 3ec:	ab 83       	std	Y+3, r26	; 0x03
 3ee:	bc 83       	std	Y+4, r27	; 0x04
		ShiftOut19(frame);
 3f0:	bc 01       	movw	r22, r24
 3f2:	cd 01       	movw	r24, r26
 3f4:	0e 94 6a 00 	call	0xd4	; 0xd4 <ShiftOut19>

		if (button_pressed) return;
 3f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 3fc:	81 11       	cpse	r24, r1
 3fe:	25 c0       	rjmp	.+74     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		frame &= ~(1UL << (i + 2));
 400:	c0 94       	com	r12
 402:	d0 94       	com	r13
 404:	e0 94       	com	r14
 406:	f0 94       	com	r15
 408:	89 81       	ldd	r24, Y+1	; 0x01
 40a:	9a 81       	ldd	r25, Y+2	; 0x02
 40c:	ab 81       	ldd	r26, Y+3	; 0x03
 40e:	bc 81       	ldd	r27, Y+4	; 0x04
 410:	c8 22       	and	r12, r24
 412:	d9 22       	and	r13, r25
 414:	ea 22       	and	r14, r26
 416:	fb 22       	and	r15, r27
		ShiftOut19(frame);
 418:	c7 01       	movw	r24, r14
 41a:	b6 01       	movw	r22, r12
 41c:	0e 94 6a 00 	call	0xd4	; 0xd4 <ShiftOut19>

		if (button_pressed) return;
 420:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 424:	81 11       	cpse	r24, r1
 426:	11 c0       	rjmp	.+34     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		frame &= ~(1UL << (i + 1));
		ShiftOut19(frame);
 428:	80 94       	com	r8
 42a:	90 94       	com	r9
 42c:	a0 94       	com	r10
 42e:	b0 94       	com	r11
 430:	c5 01       	movw	r24, r10
 432:	b4 01       	movw	r22, r8
 434:	6c 21       	and	r22, r12
 436:	7d 21       	and	r23, r13
 438:	8e 21       	and	r24, r14
 43a:	9f 21       	and	r25, r15
 43c:	0e 94 6a 00 	call	0xd4	; 0xd4 <ShiftOut19>
		if (button_pressed) return;
		frame &= ~(1UL << (i + 1));
		ShiftOut19(frame);
	}

	for (int8_t i = LED_COUNT - 3; i > 0; i--) {
 440:	ad 81       	ldd	r26, Y+5	; 0x05
 442:	be 81       	ldd	r27, Y+6	; 0x06
 444:	11 97       	sbiw	r26, 0x01	; 1
 446:	09 f0       	breq	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 448:	81 cf       	rjmp	.-254    	; 0x34c <Mode2_tripleCollect+0x14c>

		if (button_pressed) return;
		frame &= ~(1UL << (i + 1));
		ShiftOut19(frame);
	}
}
 44a:	26 96       	adiw	r28, 0x06	; 6
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	f8 94       	cli
 450:	de bf       	out	0x3e, r29	; 62
 452:	0f be       	out	0x3f, r0	; 63
 454:	cd bf       	out	0x3d, r28	; 61
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	1f 91       	pop	r17
 45c:	0f 91       	pop	r16
 45e:	ff 90       	pop	r15
 460:	ef 90       	pop	r14
 462:	df 90       	pop	r13
 464:	cf 90       	pop	r12
 466:	bf 90       	pop	r11
 468:	af 90       	pop	r10
 46a:	9f 90       	pop	r9
 46c:	8f 90       	pop	r8
 46e:	7f 90       	pop	r7
 470:	6f 90       	pop	r6
 472:	5f 90       	pop	r5
 474:	4f 90       	pop	r4
 476:	08 95       	ret

00000478 <Mode3_creative>:

void Mode3_creative(void) {
 478:	8f 92       	push	r8
 47a:	9f 92       	push	r9
 47c:	af 92       	push	r10
 47e:	bf 92       	push	r11
 480:	cf 92       	push	r12
 482:	df 92       	push	r13
 484:	ef 92       	push	r14
 486:	ff 92       	push	r15
 488:	0f 93       	push	r16
 48a:	1f 93       	push	r17
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
	uint32_t frame = 0;

	for (uint8_t i = 0; i < 10; i++) {
		if (button_pressed) return;
 490:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 494:	81 11       	cpse	r24, r1
 496:	a8 c0       	rjmp	.+336    	; 0x5e8 <Mode3_creative+0x170>
 498:	c0 e0       	ldi	r28, 0x00	; 0
 49a:	d0 e0       	ldi	r29, 0x00	; 0
 49c:	c1 2c       	mov	r12, r1
 49e:	d1 2c       	mov	r13, r1
 4a0:	76 01       	movw	r14, r12
		frame |= (1UL << i);
 4a2:	81 2c       	mov	r8, r1
 4a4:	91 2c       	mov	r9, r1
 4a6:	54 01       	movw	r10, r8
 4a8:	83 94       	inc	r8
		ShiftOut19(frame);

		if (button_pressed) return;
		frame |= (1UL << (18 - i));
 4aa:	02 e1       	ldi	r16, 0x12	; 18
 4ac:	10 e0       	ldi	r17, 0x00	; 0
 4ae:	05 c0       	rjmp	.+10     	; 0x4ba <Mode3_creative+0x42>

void Mode3_creative(void) {
	uint32_t frame = 0;

	for (uint8_t i = 0; i < 10; i++) {
		if (button_pressed) return;
 4b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 4b4:	21 96       	adiw	r28, 0x01	; 1
 4b6:	81 11       	cpse	r24, r1
 4b8:	97 c0       	rjmp	.+302    	; 0x5e8 <Mode3_creative+0x170>
		frame |= (1UL << i);
 4ba:	d5 01       	movw	r26, r10
 4bc:	c4 01       	movw	r24, r8
 4be:	0c 2e       	mov	r0, r28
 4c0:	04 c0       	rjmp	.+8      	; 0x4ca <Mode3_creative+0x52>
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	aa 1f       	adc	r26, r26
 4c8:	bb 1f       	adc	r27, r27
 4ca:	0a 94       	dec	r0
 4cc:	d2 f7       	brpl	.-12     	; 0x4c2 <Mode3_creative+0x4a>
 4ce:	c8 2a       	or	r12, r24
 4d0:	d9 2a       	or	r13, r25
 4d2:	ea 2a       	or	r14, r26
 4d4:	fb 2a       	or	r15, r27
		ShiftOut19(frame);
 4d6:	c7 01       	movw	r24, r14
 4d8:	b6 01       	movw	r22, r12
 4da:	0e 94 6a 00 	call	0xd4	; 0xd4 <ShiftOut19>

		if (button_pressed) return;
 4de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 4e2:	81 11       	cpse	r24, r1
 4e4:	81 c0       	rjmp	.+258    	; 0x5e8 <Mode3_creative+0x170>
		frame |= (1UL << (18 - i));
 4e6:	c8 01       	movw	r24, r16
 4e8:	8c 1b       	sub	r24, r28
 4ea:	9d 0b       	sbc	r25, r29
 4ec:	a5 01       	movw	r20, r10
 4ee:	94 01       	movw	r18, r8
 4f0:	04 c0       	rjmp	.+8      	; 0x4fa <Mode3_creative+0x82>
 4f2:	22 0f       	add	r18, r18
 4f4:	33 1f       	adc	r19, r19
 4f6:	44 1f       	adc	r20, r20
 4f8:	55 1f       	adc	r21, r21
 4fa:	8a 95       	dec	r24
 4fc:	d2 f7       	brpl	.-12     	; 0x4f2 <Mode3_creative+0x7a>
 4fe:	c2 2a       	or	r12, r18
 500:	d3 2a       	or	r13, r19
 502:	e4 2a       	or	r14, r20
 504:	f5 2a       	or	r15, r21
		ShiftOut19(frame);
 506:	c7 01       	movw	r24, r14
 508:	b6 01       	movw	r22, r12
 50a:	0e 94 6a 00 	call	0xd4	; 0xd4 <ShiftOut19>
}

void Mode3_creative(void) {
	uint32_t frame = 0;

	for (uint8_t i = 0; i < 10; i++) {
 50e:	c9 30       	cpi	r28, 0x09	; 9
 510:	d1 05       	cpc	r29, r1
 512:	71 f6       	brne	.-100    	; 0x4b0 <Mode3_creative+0x38>
		if (button_pressed) return;
		frame |= (1UL << (18 - i));
		ShiftOut19(frame);
	}

	if (button_pressed) return;
 514:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 518:	81 11       	cpse	r24, r1
 51a:	66 c0       	rjmp	.+204    	; 0x5e8 <Mode3_creative+0x170>
	frame = 0x7FFFF;
	ShiftOut19(frame);
 51c:	6f ef       	ldi	r22, 0xFF	; 255
 51e:	7f ef       	ldi	r23, 0xFF	; 255
 520:	87 e0       	ldi	r24, 0x07	; 7
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 6a 00 	call	0xd4	; 0xd4 <ShiftOut19>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 528:	8f e4       	ldi	r24, 0x4F	; 79
 52a:	93 ec       	ldi	r25, 0xC3	; 195
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	f1 f7       	brne	.-4      	; 0x52c <Mode3_creative+0xb4>
 530:	00 c0       	rjmp	.+0      	; 0x532 <Mode3_creative+0xba>
 532:	00 00       	nop
	_delay_ms(200); // Можно тоже заменить на цикл с ожиданием нескольких тиков

	for (uint8_t i = 0; i < 10; i++) {
		if (button_pressed) return;
 534:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 538:	81 11       	cpse	r24, r1
 53a:	56 c0       	rjmp	.+172    	; 0x5e8 <Mode3_creative+0x170>
 53c:	c0 e0       	ldi	r28, 0x00	; 0
 53e:	d0 e0       	ldi	r29, 0x00	; 0
 540:	0f 2e       	mov	r0, r31
 542:	cc 24       	eor	r12, r12
 544:	ca 94       	dec	r12
 546:	dc 2c       	mov	r13, r12
 548:	f7 e0       	ldi	r31, 0x07	; 7
 54a:	ef 2e       	mov	r14, r31
 54c:	f1 2c       	mov	r15, r1
 54e:	f0 2d       	mov	r31, r0
		frame &= ~(1UL << i);
 550:	81 2c       	mov	r8, r1
 552:	91 2c       	mov	r9, r1
 554:	54 01       	movw	r10, r8
 556:	83 94       	inc	r8
		ShiftOut19(frame);

		if (button_pressed) return;
		frame &= ~(1UL << (18 - i));
 558:	02 e1       	ldi	r16, 0x12	; 18
 55a:	10 e0       	ldi	r17, 0x00	; 0
 55c:	05 c0       	rjmp	.+10     	; 0x568 <Mode3_creative+0xf0>
	frame = 0x7FFFF;
	ShiftOut19(frame);
	_delay_ms(200); // Можно тоже заменить на цикл с ожиданием нескольких тиков

	for (uint8_t i = 0; i < 10; i++) {
		if (button_pressed) return;
 55e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 562:	21 96       	adiw	r28, 0x01	; 1
 564:	81 11       	cpse	r24, r1
 566:	40 c0       	rjmp	.+128    	; 0x5e8 <Mode3_creative+0x170>
		frame &= ~(1UL << i);
 568:	d5 01       	movw	r26, r10
 56a:	c4 01       	movw	r24, r8
 56c:	0c 2e       	mov	r0, r28
 56e:	04 c0       	rjmp	.+8      	; 0x578 <Mode3_creative+0x100>
 570:	88 0f       	add	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	aa 1f       	adc	r26, r26
 576:	bb 1f       	adc	r27, r27
 578:	0a 94       	dec	r0
 57a:	d2 f7       	brpl	.-12     	; 0x570 <Mode3_creative+0xf8>
 57c:	80 95       	com	r24
 57e:	90 95       	com	r25
 580:	a0 95       	com	r26
 582:	b0 95       	com	r27
 584:	c8 22       	and	r12, r24
 586:	d9 22       	and	r13, r25
 588:	ea 22       	and	r14, r26
 58a:	fb 22       	and	r15, r27
		ShiftOut19(frame);
 58c:	c7 01       	movw	r24, r14
 58e:	b6 01       	movw	r22, r12
 590:	0e 94 6a 00 	call	0xd4	; 0xd4 <ShiftOut19>

		if (button_pressed) return;
 594:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 598:	81 11       	cpse	r24, r1
 59a:	26 c0       	rjmp	.+76     	; 0x5e8 <Mode3_creative+0x170>
		frame &= ~(1UL << (18 - i));
 59c:	c8 01       	movw	r24, r16
 59e:	8c 1b       	sub	r24, r28
 5a0:	9d 0b       	sbc	r25, r29
 5a2:	a5 01       	movw	r20, r10
 5a4:	94 01       	movw	r18, r8
 5a6:	04 c0       	rjmp	.+8      	; 0x5b0 <Mode3_creative+0x138>
 5a8:	22 0f       	add	r18, r18
 5aa:	33 1f       	adc	r19, r19
 5ac:	44 1f       	adc	r20, r20
 5ae:	55 1f       	adc	r21, r21
 5b0:	8a 95       	dec	r24
 5b2:	d2 f7       	brpl	.-12     	; 0x5a8 <Mode3_creative+0x130>
 5b4:	da 01       	movw	r26, r20
 5b6:	c9 01       	movw	r24, r18
 5b8:	80 95       	com	r24
 5ba:	90 95       	com	r25
 5bc:	a0 95       	com	r26
 5be:	b0 95       	com	r27
 5c0:	c8 22       	and	r12, r24
 5c2:	d9 22       	and	r13, r25
 5c4:	ea 22       	and	r14, r26
 5c6:	fb 22       	and	r15, r27
		ShiftOut19(frame);
 5c8:	c7 01       	movw	r24, r14
 5ca:	b6 01       	movw	r22, r12
 5cc:	0e 94 6a 00 	call	0xd4	; 0xd4 <ShiftOut19>
	if (button_pressed) return;
	frame = 0x7FFFF;
	ShiftOut19(frame);
	_delay_ms(200); // Можно тоже заменить на цикл с ожиданием нескольких тиков

	for (uint8_t i = 0; i < 10; i++) {
 5d0:	c9 30       	cpi	r28, 0x09	; 9
 5d2:	d1 05       	cpc	r29, r1
 5d4:	21 f6       	brne	.-120    	; 0x55e <Mode3_creative+0xe6>
		if (button_pressed) return;
		frame &= ~(1UL << (18 - i));
		ShiftOut19(frame);
	}

	if (button_pressed) return;
 5d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 5da:	81 11       	cpse	r24, r1
 5dc:	05 c0       	rjmp	.+10     	; 0x5e8 <Mode3_creative+0x170>
	frame = 0;
	ShiftOut19(frame);
 5de:	60 e0       	ldi	r22, 0x00	; 0
 5e0:	70 e0       	ldi	r23, 0x00	; 0
 5e2:	cb 01       	movw	r24, r22
 5e4:	0e 94 6a 00 	call	0xd4	; 0xd4 <ShiftOut19>
}
 5e8:	df 91       	pop	r29
 5ea:	cf 91       	pop	r28
 5ec:	1f 91       	pop	r17
 5ee:	0f 91       	pop	r16
 5f0:	ff 90       	pop	r15
 5f2:	ef 90       	pop	r14
 5f4:	df 90       	pop	r13
 5f6:	cf 90       	pop	r12
 5f8:	bf 90       	pop	r11
 5fa:	af 90       	pop	r10
 5fc:	9f 90       	pop	r9
 5fe:	8f 90       	pop	r8
 600:	08 95       	ret

00000602 <main>:

int main(void) {
	InitPorts();
 602:	0e 94 48 00 	call	0x90	; 0x90 <InitPorts>
	InitTimer();
 606:	0e 94 4f 00 	call	0x9e	; 0x9e <InitTimer>

	EICRA |= (1 << ISC01);  // Прерывание по спаду (нажатие кнопки)
 60a:	e9 e6       	ldi	r30, 0x69	; 105
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	80 81       	ld	r24, Z
 610:	82 60       	ori	r24, 0x02	; 2
 612:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);   // Разрешаем прерывание INT0
 614:	e8 9a       	sbi	0x1d, 0	; 29
	sei();                  // Глобально разрешаем прерывания
 616:	78 94       	sei

	while (1) {
		if (button_pressed) {
			mode = (mode + 1) % 3;
 618:	c3 e0       	ldi	r28, 0x03	; 3
 61a:	d0 e0       	ldi	r29, 0x00	; 0
	EICRA |= (1 << ISC01);  // Прерывание по спаду (нажатие кнопки)
	EIMSK |= (1 << INT0);   // Разрешаем прерывание INT0
	sei();                  // Глобально разрешаем прерывания

	while (1) {
		if (button_pressed) {
 61c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 620:	88 23       	and	r24, r24
 622:	59 f0       	breq	.+22     	; 0x63a <main+0x38>
			mode = (mode + 1) % 3;
 624:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mode>
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	01 96       	adiw	r24, 0x01	; 1
 62c:	be 01       	movw	r22, r28
 62e:	0e 94 2e 03 	call	0x65c	; 0x65c <__divmodhi4>
 632:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <mode>
			button_pressed = 0;
 636:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		}

		switch (mode) {
 63a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mode>
 63e:	81 30       	cpi	r24, 0x01	; 1
 640:	39 f0       	breq	.+14     	; 0x650 <main+0x4e>
 642:	18 f0       	brcs	.+6      	; 0x64a <main+0x48>
 644:	82 30       	cpi	r24, 0x02	; 2
 646:	39 f0       	breq	.+14     	; 0x656 <main+0x54>
 648:	e9 cf       	rjmp	.-46     	; 0x61c <main+0x1a>
			case 0: Mode1_collect(); break;
 64a:	0e 94 a8 00 	call	0x150	; 0x150 <Mode1_collect>
 64e:	e6 cf       	rjmp	.-52     	; 0x61c <main+0x1a>
			case 1: Mode2_tripleCollect(); break;
 650:	0e 94 00 01 	call	0x200	; 0x200 <Mode2_tripleCollect>
 654:	e3 cf       	rjmp	.-58     	; 0x61c <main+0x1a>
			case 2: Mode3_creative(); break;
 656:	0e 94 3c 02 	call	0x478	; 0x478 <Mode3_creative>
 65a:	e0 cf       	rjmp	.-64     	; 0x61c <main+0x1a>

0000065c <__divmodhi4>:
 65c:	97 fb       	bst	r25, 7
 65e:	07 2e       	mov	r0, r23
 660:	16 f4       	brtc	.+4      	; 0x666 <__divmodhi4+0xa>
 662:	00 94       	com	r0
 664:	07 d0       	rcall	.+14     	; 0x674 <__divmodhi4_neg1>
 666:	77 fd       	sbrc	r23, 7
 668:	09 d0       	rcall	.+18     	; 0x67c <__divmodhi4_neg2>
 66a:	0e 94 42 03 	call	0x684	; 0x684 <__udivmodhi4>
 66e:	07 fc       	sbrc	r0, 7
 670:	05 d0       	rcall	.+10     	; 0x67c <__divmodhi4_neg2>
 672:	3e f4       	brtc	.+14     	; 0x682 <__divmodhi4_exit>

00000674 <__divmodhi4_neg1>:
 674:	90 95       	com	r25
 676:	81 95       	neg	r24
 678:	9f 4f       	sbci	r25, 0xFF	; 255
 67a:	08 95       	ret

0000067c <__divmodhi4_neg2>:
 67c:	70 95       	com	r23
 67e:	61 95       	neg	r22
 680:	7f 4f       	sbci	r23, 0xFF	; 255

00000682 <__divmodhi4_exit>:
 682:	08 95       	ret

00000684 <__udivmodhi4>:
 684:	aa 1b       	sub	r26, r26
 686:	bb 1b       	sub	r27, r27
 688:	51 e1       	ldi	r21, 0x11	; 17
 68a:	07 c0       	rjmp	.+14     	; 0x69a <__udivmodhi4_ep>

0000068c <__udivmodhi4_loop>:
 68c:	aa 1f       	adc	r26, r26
 68e:	bb 1f       	adc	r27, r27
 690:	a6 17       	cp	r26, r22
 692:	b7 07       	cpc	r27, r23
 694:	10 f0       	brcs	.+4      	; 0x69a <__udivmodhi4_ep>
 696:	a6 1b       	sub	r26, r22
 698:	b7 0b       	sbc	r27, r23

0000069a <__udivmodhi4_ep>:
 69a:	88 1f       	adc	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	5a 95       	dec	r21
 6a0:	a9 f7       	brne	.-22     	; 0x68c <__udivmodhi4_loop>
 6a2:	80 95       	com	r24
 6a4:	90 95       	com	r25
 6a6:	bc 01       	movw	r22, r24
 6a8:	cd 01       	movw	r24, r26
 6aa:	08 95       	ret

000006ac <_exit>:
 6ac:	f8 94       	cli

000006ae <__stop_program>:
 6ae:	ff cf       	rjmp	.-2      	; 0x6ae <__stop_program>
