
pinsLedsNewModes.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000005d0  00000664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800102  00800102  00000666  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000666  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000698  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008f4  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000071f  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000510  00000000  00000000  0000174b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00001c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000448  00000000  00000000  00001da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000026e  00000000  00000000  000021e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002456  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ed       	ldi	r30, 0xD0	; 208
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <main>
  9e:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <InitPorts>:
uint8_t line = 0;


void InitPorts(void)
{
	DDRB |= 0xFF;
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	84 b9       	out	0x04, r24	; 4
	DDRC |= 0x3F;
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	8f 63       	ori	r24, 0x3F	; 63
  b0:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0x73;
  b2:	8a b1       	in	r24, 0x0a	; 10
  b4:	83 67       	ori	r24, 0x73	; 115
  b6:	8a b9       	out	0x0a, r24	; 10
	
	DDRD &= ~(1 << PIND2); // PIND2 - кнопка
  b8:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1 << PIND2); // подтяжка к питанию
  ba:	5a 9a       	sbi	0x0b, 2	; 11
  bc:	08 95       	ret

000000be <InitTimer>:
}

void InitTimer(void)
{
	TCCR1A = 0;
  be:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B |= (1 << WGM12);
  c2:	e1 e8       	ldi	r30, 0x81	; 129
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	88 60       	ori	r24, 0x08	; 8
  ca:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS12) | (1 << CS10);
  cc:	80 81       	ld	r24, Z
  ce:	85 60       	ori	r24, 0x05	; 5
  d0:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);
  d2:	ef e6       	ldi	r30, 0x6F	; 111
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	80 83       	st	Z, r24
	OCR1A = 400;
  dc:	80 e9       	ldi	r24, 0x90	; 144
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  e4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  e8:	08 95       	ret

000000ea <ShiftOut19>:
}

void ShiftOut19(uint32_t data)
{
	PORTB = data & 0xFF;
  ea:	65 b9       	out	0x05, r22	; 5
	PORTC = (data >> 8) & 0x3F;
  ec:	27 2f       	mov	r18, r23
  ee:	2f 73       	andi	r18, 0x3F	; 63
  f0:	28 b9       	out	0x08, r18	; 8
	
	if (data & (1UL << 14))
  f2:	76 ff       	sbrs	r23, 6
  f4:	02 c0       	rjmp	.+4      	; 0xfa <ShiftOut19+0x10>
	{
		PORTD |= (1 << PIND0);
  f6:	58 9a       	sbi	0x0b, 0	; 11
  f8:	01 c0       	rjmp	.+2      	; 0xfc <ShiftOut19+0x12>
	}
	else
	{
		PORTD &= ~(1 << PIND0);
  fa:	58 98       	cbi	0x0b, 0	; 11
	}
	
	if (data & (1UL << 15))
  fc:	77 ff       	sbrs	r23, 7
  fe:	02 c0       	rjmp	.+4      	; 0x104 <ShiftOut19+0x1a>
	{
		PORTD |= (1 << PIND1);
 100:	59 9a       	sbi	0x0b, 1	; 11
 102:	01 c0       	rjmp	.+2      	; 0x106 <ShiftOut19+0x1c>
	}
	else
	{
		PORTD &= ~(1 << PIND1);
 104:	59 98       	cbi	0x0b, 1	; 11
	}
	
	if (data & (1UL << 16))
 106:	80 ff       	sbrs	r24, 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <ShiftOut19+0x24>
	{
		PORTD |= (1 << PIND4);
 10a:	5c 9a       	sbi	0x0b, 4	; 11
 10c:	01 c0       	rjmp	.+2      	; 0x110 <ShiftOut19+0x26>
	}
	else
	{
		PORTD &= ~(1 << PIND4);
 10e:	5c 98       	cbi	0x0b, 4	; 11
	}
	
	if (data & (1UL << 17))
 110:	81 ff       	sbrs	r24, 1
 112:	02 c0       	rjmp	.+4      	; 0x118 <ShiftOut19+0x2e>
	{
		PORTD |= (1 << PIND5);
 114:	5d 9a       	sbi	0x0b, 5	; 11
 116:	01 c0       	rjmp	.+2      	; 0x11a <ShiftOut19+0x30>
	}
	else
	{
		PORTD &= ~(1 << PIND5);
 118:	5d 98       	cbi	0x0b, 5	; 11
	}
	
	if (data & (1UL << 18))
 11a:	82 ff       	sbrs	r24, 2
 11c:	02 c0       	rjmp	.+4      	; 0x122 <ShiftOut19+0x38>
	{
		PORTD |= (1 << PIND6);
 11e:	5e 9a       	sbi	0x0b, 6	; 11
 120:	08 95       	ret
	}
	else
	{
		PORTD &= ~(1 << PIND6);
 122:	5e 98       	cbi	0x0b, 6	; 11
 124:	08 95       	ret

00000126 <__vector_1>:
	}
}

ISR(INT0_vect)
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	2f 93       	push	r18
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	86 e7       	ldi	r24, 0x76	; 118
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <__vector_1+0x16>
 144:	00 c0       	rjmp	.+0      	; 0x146 <__vector_1+0x20>
 146:	00 00       	nop
	_delay_ms(30);
	if (!(PIND & (1 << PIND2)))
 148:	4a 99       	sbic	0x09, 2	; 9
 14a:	03 c0       	rjmp	.+6      	; 0x152 <__vector_1+0x2c>
	{
		button_pressed = 1;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <button_pressed>
	}
}
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	2f 91       	pop	r18
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
 16c:	8f 93       	push	r24
	tick = 1;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <tick>
}
 174:	8f 91       	pop	r24
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <Mode1_collect>:

void Mode1_collect(void)
{
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
	if (step < LED_COUNT)
 184:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <step>
 188:	83 31       	cpi	r24, 0x13	; 19
 18a:	b0 f4       	brcc	.+44     	; 0x1b8 <Mode1_collect+0x38>
	{
		frame = (1UL << step);
 18c:	41 e0       	ldi	r20, 0x01	; 1
 18e:	50 e0       	ldi	r21, 0x00	; 0
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	8a 01       	movw	r16, r20
 196:	9b 01       	movw	r18, r22
 198:	04 c0       	rjmp	.+8      	; 0x1a2 <Mode1_collect+0x22>
 19a:	00 0f       	add	r16, r16
 19c:	11 1f       	adc	r17, r17
 19e:	22 1f       	adc	r18, r18
 1a0:	33 1f       	adc	r19, r19
 1a2:	8a 95       	dec	r24
 1a4:	d2 f7       	brpl	.-12     	; 0x19a <Mode1_collect+0x1a>
 1a6:	00 93 05 01 	sts	0x0105, r16	; 0x800105 <frame>
 1aa:	10 93 06 01 	sts	0x0106, r17	; 0x800106 <frame+0x1>
 1ae:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <frame+0x2>
 1b2:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <frame+0x3>
 1b6:	28 c0       	rjmp	.+80     	; 0x208 <Mode1_collect+0x88>
	}
	else if (step < 2 * LED_COUNT)
 1b8:	86 32       	cpi	r24, 0x26	; 38
 1ba:	c0 f4       	brcc	.+48     	; 0x1ec <Mode1_collect+0x6c>
	{
		frame = (1UL << (2 * LED_COUNT - step - 1));
 1bc:	25 e2       	ldi	r18, 0x25	; 37
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	28 1b       	sub	r18, r24
 1c2:	31 09       	sbc	r19, r1
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	a0 e0       	ldi	r26, 0x00	; 0
 1ca:	b0 e0       	ldi	r27, 0x00	; 0
 1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <Mode1_collect+0x56>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	aa 1f       	adc	r26, r26
 1d4:	bb 1f       	adc	r27, r27
 1d6:	2a 95       	dec	r18
 1d8:	d2 f7       	brpl	.-12     	; 0x1ce <Mode1_collect+0x4e>
 1da:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <frame>
 1de:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <frame+0x1>
 1e2:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <frame+0x2>
 1e6:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <frame+0x3>
 1ea:	0e c0       	rjmp	.+28     	; 0x208 <Mode1_collect+0x88>
	}
	else
	{
		step = 0;
 1ec:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <step>
		frame = (1UL << step);
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	a0 e0       	ldi	r26, 0x00	; 0
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <frame>
 1fc:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <frame+0x1>
 200:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <frame+0x2>
 204:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <frame+0x3>
	}
	
	ShiftOut19(frame);
 208:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <frame>
 20c:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <frame+0x1>
 210:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <frame+0x2>
 214:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <frame+0x3>
 218:	0e 94 75 00 	call	0xea	; 0xea <ShiftOut19>
	step++;
 21c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <step>
 220:	8f 5f       	subi	r24, 0xFF	; 255
 222:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <step>
}
 226:	1f 91       	pop	r17
 228:	0f 91       	pop	r16
 22a:	08 95       	ret

0000022c <Mode2_tripleCollect>:

void Mode2_tripleCollect(void)
{
 22c:	4f 92       	push	r4
 22e:	5f 92       	push	r5
 230:	6f 92       	push	r6
 232:	7f 92       	push	r7
 234:	8f 92       	push	r8
 236:	9f 92       	push	r9
 238:	af 92       	push	r10
 23a:	bf 92       	push	r11
 23c:	cf 92       	push	r12
 23e:	df 92       	push	r13
 240:	ef 92       	push	r14
 242:	ff 92       	push	r15
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
	static uint8_t pos_led = 0;      // текущая позиция
	static uint8_t count = 1;        // количество диодов (1,2,3,2,1)
	static uint8_t line = 0; 

	frame = 0;
 248:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <frame>
 24c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <frame+0x1>
 250:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <frame+0x2>
 254:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <frame+0x3>
	for(uint8_t i = 0; i < count; i++)
 258:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 25c:	44 23       	and	r20, r20
 25e:	69 f1       	breq	.+90     	; 0x2ba <Mode2_tripleCollect+0x8e>
	{
		frame |= (1UL << ((pos_led + i) % LED_COUNT));
 260:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <pos_led.1759>
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	c1 2c       	mov	r12, r1
 26a:	d1 2c       	mov	r13, r1
 26c:	76 01       	movw	r14, r12
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	c3 e1       	ldi	r28, 0x13	; 19
 272:	d0 e0       	ldi	r29, 0x00	; 0
 274:	81 2c       	mov	r8, r1
 276:	91 2c       	mov	r9, r1
 278:	54 01       	movw	r10, r8
 27a:	83 94       	inc	r8
 27c:	cf 01       	movw	r24, r30
 27e:	82 0f       	add	r24, r18
 280:	93 1f       	adc	r25, r19
 282:	be 01       	movw	r22, r28
 284:	0e 94 be 02 	call	0x57c	; 0x57c <__divmodhi4>
 288:	24 01       	movw	r4, r8
 28a:	35 01       	movw	r6, r10
 28c:	04 c0       	rjmp	.+8      	; 0x296 <Mode2_tripleCollect+0x6a>
 28e:	44 0c       	add	r4, r4
 290:	55 1c       	adc	r5, r5
 292:	66 1c       	adc	r6, r6
 294:	77 1c       	adc	r7, r7
 296:	8a 95       	dec	r24
 298:	d2 f7       	brpl	.-12     	; 0x28e <Mode2_tripleCollect+0x62>
 29a:	c4 28       	or	r12, r4
 29c:	d5 28       	or	r13, r5
 29e:	e6 28       	or	r14, r6
 2a0:	f7 28       	or	r15, r7
 2a2:	2f 5f       	subi	r18, 0xFF	; 255
 2a4:	3f 4f       	sbci	r19, 0xFF	; 255
	static uint8_t pos_led = 0;      // текущая позиция
	static uint8_t count = 1;        // количество диодов (1,2,3,2,1)
	static uint8_t line = 0; 

	frame = 0;
	for(uint8_t i = 0; i < count; i++)
 2a6:	24 17       	cp	r18, r20
 2a8:	48 f3       	brcs	.-46     	; 0x27c <Mode2_tripleCollect+0x50>
 2aa:	c0 92 05 01 	sts	0x0105, r12	; 0x800105 <frame>
 2ae:	d0 92 06 01 	sts	0x0106, r13	; 0x800106 <frame+0x1>
 2b2:	e0 92 07 01 	sts	0x0107, r14	; 0x800107 <frame+0x2>
 2b6:	f0 92 08 01 	sts	0x0108, r15	; 0x800108 <frame+0x3>
	{
		frame |= (1UL << ((pos_led + i) % LED_COUNT));
	}

	pos_led = (pos_led + 1) % LED_COUNT;
 2ba:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <pos_led.1759>
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	63 e1       	ldi	r22, 0x13	; 19
 2c4:	70 e0       	ldi	r23, 0x00	; 0
 2c6:	0e 94 be 02 	call	0x57c	; 0x57c <__divmodhi4>
 2ca:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <pos_led.1759>

	if(pos_led == 0)
 2ce:	81 11       	cpse	r24, r1
 2d0:	16 c0       	rjmp	.+44     	; 0x2fe <Mode2_tripleCollect+0xd2>
	{
		if(line == 0)
 2d2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 2d6:	81 11       	cpse	r24, r1
 2d8:	0a c0       	rjmp	.+20     	; 0x2ee <Mode2_tripleCollect+0xc2>
		{
			if(count < 3)
 2da:	43 30       	cpi	r20, 0x03	; 3
 2dc:	20 f4       	brcc	.+8      	; 0x2e6 <Mode2_tripleCollect+0xba>
			{
				count++;
 2de:	4f 5f       	subi	r20, 0xFF	; 255
 2e0:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_start>
 2e4:	0c c0       	rjmp	.+24     	; 0x2fe <Mode2_tripleCollect+0xd2>
			}
			else
			{
				line = 1;
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 2ec:	08 c0       	rjmp	.+16     	; 0x2fe <Mode2_tripleCollect+0xd2>
			}
		}
		else
		{
			if(count > 1)
 2ee:	42 30       	cpi	r20, 0x02	; 2
 2f0:	20 f0       	brcs	.+8      	; 0x2fa <Mode2_tripleCollect+0xce>
			{
				count--;
 2f2:	41 50       	subi	r20, 0x01	; 1
 2f4:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_start>
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <Mode2_tripleCollect+0xd2>
			}
			else
			{
				line = 0;
 2fa:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			}
		}
	}

	ShiftOut19(frame);
 2fe:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <frame>
 302:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <frame+0x1>
 306:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <frame+0x2>
 30a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <frame+0x3>
 30e:	0e 94 75 00 	call	0xea	; 0xea <ShiftOut19>
}
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	ff 90       	pop	r15
 318:	ef 90       	pop	r14
 31a:	df 90       	pop	r13
 31c:	cf 90       	pop	r12
 31e:	bf 90       	pop	r11
 320:	af 90       	pop	r10
 322:	9f 90       	pop	r9
 324:	8f 90       	pop	r8
 326:	7f 90       	pop	r7
 328:	6f 90       	pop	r6
 32a:	5f 90       	pop	r5
 32c:	4f 90       	pop	r4
 32e:	08 95       	ret

00000330 <Mode3_creative>:

void Mode3_creative(void)
{
 330:	cf 92       	push	r12
 332:	df 92       	push	r13
 334:	ef 92       	push	r14
 336:	ff 92       	push	r15
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
	if (line == 0)
 33c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <line>
 340:	81 11       	cpse	r24, r1
 342:	3f c0       	rjmp	.+126    	; 0x3c2 <Mode3_creative+0x92>
	{
		if (step < 10)
 344:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <step>
 348:	8a 30       	cpi	r24, 0x0A	; 10
 34a:	a8 f5       	brcc	.+106    	; 0x3b6 <Mode3_creative+0x86>
		{
			frame |= (1UL << step);
			frame |= (1UL << (18 - step));
 34c:	41 e0       	ldi	r20, 0x01	; 1
 34e:	50 e0       	ldi	r21, 0x00	; 0
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	6a 01       	movw	r12, r20
 356:	7b 01       	movw	r14, r22
 358:	08 2e       	mov	r0, r24
 35a:	04 c0       	rjmp	.+8      	; 0x364 <Mode3_creative+0x34>
 35c:	cc 0c       	add	r12, r12
 35e:	dd 1c       	adc	r13, r13
 360:	ee 1c       	adc	r14, r14
 362:	ff 1c       	adc	r15, r15
 364:	0a 94       	dec	r0
 366:	d2 f7       	brpl	.-12     	; 0x35c <Mode3_creative+0x2c>
 368:	00 91 05 01 	lds	r16, 0x0105	; 0x800105 <frame>
 36c:	10 91 06 01 	lds	r17, 0x0106	; 0x800106 <frame+0x1>
 370:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <frame+0x2>
 374:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <frame+0x3>
 378:	0c 29       	or	r16, r12
 37a:	1d 29       	or	r17, r13
 37c:	2e 29       	or	r18, r14
 37e:	3f 29       	or	r19, r15
 380:	e2 e1       	ldi	r30, 0x12	; 18
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	e8 1b       	sub	r30, r24
 386:	f1 09       	sbc	r31, r1
 388:	04 c0       	rjmp	.+8      	; 0x392 <Mode3_creative+0x62>
 38a:	44 0f       	add	r20, r20
 38c:	55 1f       	adc	r21, r21
 38e:	66 1f       	adc	r22, r22
 390:	77 1f       	adc	r23, r23
 392:	ea 95       	dec	r30
 394:	d2 f7       	brpl	.-12     	; 0x38a <Mode3_creative+0x5a>
 396:	40 2b       	or	r20, r16
 398:	51 2b       	or	r21, r17
 39a:	62 2b       	or	r22, r18
 39c:	73 2b       	or	r23, r19
 39e:	40 93 05 01 	sts	0x0105, r20	; 0x800105 <frame>
 3a2:	50 93 06 01 	sts	0x0106, r21	; 0x800106 <frame+0x1>
 3a6:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <frame+0x2>
 3aa:	70 93 08 01 	sts	0x0108, r23	; 0x800108 <frame+0x3>
			step++;
 3ae:	8f 5f       	subi	r24, 0xFF	; 255
 3b0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <step>
 3b4:	65 c0       	rjmp	.+202    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
		}
		else
		{
			line = 1;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <line>
			step = 0;
 3bc:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <step>
 3c0:	5f c0       	rjmp	.+190    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
		}
	}
	else if (line == 1)
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	81 f4       	brne	.+32     	; 0x3e6 <Mode3_creative+0xb6>
	{
		frame = 0x7FFFF;
 3c6:	8f ef       	ldi	r24, 0xFF	; 255
 3c8:	9f ef       	ldi	r25, 0xFF	; 255
 3ca:	a7 e0       	ldi	r26, 0x07	; 7
 3cc:	b0 e0       	ldi	r27, 0x00	; 0
 3ce:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <frame>
 3d2:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <frame+0x1>
 3d6:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <frame+0x2>
 3da:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <frame+0x3>
		line = 2;
 3de:	82 e0       	ldi	r24, 0x02	; 2
 3e0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <line>
 3e4:	4d c0       	rjmp	.+154    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
	}
	else
	{
		if (step < 10)
 3e6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <step>
 3ea:	8a 30       	cpi	r24, 0x0A	; 10
 3ec:	e8 f5       	brcc	.+122    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		{
			frame &= ~(1UL << step);
			frame &= ~(1UL << (18 - step));
 3ee:	41 e0       	ldi	r20, 0x01	; 1
 3f0:	50 e0       	ldi	r21, 0x00	; 0
 3f2:	60 e0       	ldi	r22, 0x00	; 0
 3f4:	70 e0       	ldi	r23, 0x00	; 0
 3f6:	8a 01       	movw	r16, r20
 3f8:	9b 01       	movw	r18, r22
 3fa:	08 2e       	mov	r0, r24
 3fc:	04 c0       	rjmp	.+8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fe:	00 0f       	add	r16, r16
 400:	11 1f       	adc	r17, r17
 402:	22 1f       	adc	r18, r18
 404:	33 1f       	adc	r19, r19
 406:	0a 94       	dec	r0
 408:	d2 f7       	brpl	.-12     	; 0x3fe <Mode3_creative+0xce>
 40a:	00 95       	com	r16
 40c:	10 95       	com	r17
 40e:	20 95       	com	r18
 410:	30 95       	com	r19
 412:	c0 90 05 01 	lds	r12, 0x0105	; 0x800105 <frame>
 416:	d0 90 06 01 	lds	r13, 0x0106	; 0x800106 <frame+0x1>
 41a:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <frame+0x2>
 41e:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <frame+0x3>
 422:	0c 21       	and	r16, r12
 424:	1d 21       	and	r17, r13
 426:	2e 21       	and	r18, r14
 428:	3f 21       	and	r19, r15
 42a:	e2 e1       	ldi	r30, 0x12	; 18
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	e8 1b       	sub	r30, r24
 430:	f1 09       	sbc	r31, r1
 432:	04 c0       	rjmp	.+8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 434:	44 0f       	add	r20, r20
 436:	55 1f       	adc	r21, r21
 438:	66 1f       	adc	r22, r22
 43a:	77 1f       	adc	r23, r23
 43c:	ea 95       	dec	r30
 43e:	d2 f7       	brpl	.-12     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 440:	40 95       	com	r20
 442:	50 95       	com	r21
 444:	60 95       	com	r22
 446:	70 95       	com	r23
 448:	40 23       	and	r20, r16
 44a:	51 23       	and	r21, r17
 44c:	62 23       	and	r22, r18
 44e:	73 23       	and	r23, r19
 450:	40 93 05 01 	sts	0x0105, r20	; 0x800105 <frame>
 454:	50 93 06 01 	sts	0x0106, r21	; 0x800106 <frame+0x1>
 458:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <frame+0x2>
 45c:	70 93 08 01 	sts	0x0108, r23	; 0x800108 <frame+0x3>
			step++;
 460:	8f 5f       	subi	r24, 0xFF	; 255
 462:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <step>
 466:	0c c0       	rjmp	.+24     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
		}
		else
		{
			line = 0;
 468:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <line>
			step = 0;
 46c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <step>
			frame = 0;
 470:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <frame>
 474:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <frame+0x1>
 478:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <frame+0x2>
 47c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <frame+0x3>
		}
	}
	
	ShiftOut19(frame);
 480:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <frame>
 484:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <frame+0x1>
 488:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <frame+0x2>
 48c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <frame+0x3>
 490:	0e 94 75 00 	call	0xea	; 0xea <ShiftOut19>
}
 494:	1f 91       	pop	r17
 496:	0f 91       	pop	r16
 498:	ff 90       	pop	r15
 49a:	ef 90       	pop	r14
 49c:	df 90       	pop	r13
 49e:	cf 90       	pop	r12
 4a0:	08 95       	ret

000004a2 <main>:

int main(void)
{
	InitPorts();
 4a2:	0e 94 53 00 	call	0xa6	; 0xa6 <InitPorts>
	InitTimer();
 4a6:	0e 94 5f 00 	call	0xbe	; 0xbe <InitTimer>
	
	EICRA |= (1 << ISC01);
 4aa:	e9 e6       	ldi	r30, 0x69	; 105
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 81       	ld	r24, Z
 4b0:	82 60       	ori	r24, 0x02	; 2
 4b2:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);
 4b4:	e8 9a       	sbi	0x1d, 0	; 29
	sei();
 4b6:	78 94       	sei

	while (1)
	{
		if (button_pressed)
		{
			mode = (mode + 1) % 3;
 4b8:	c3 e0       	ldi	r28, 0x03	; 3
 4ba:	d0 e0       	ldi	r29, 0x00	; 0
			button_pressed = 0;
			step = 0;
			frame = 0;
 4bc:	e1 2c       	mov	r14, r1
 4be:	f1 2c       	mov	r15, r1
 4c0:	00 e0       	ldi	r16, 0x00	; 0
 4c2:	10 e0       	ldi	r17, 0x00	; 0
 4c4:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <step>
 4c8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <frame>
 4cc:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <frame+0x1>
 4d0:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <frame+0x2>
 4d4:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <frame+0x3>
 4d8:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <line>
	EIMSK |= (1 << INT0);
	sei();

	while (1)
	{
		if (button_pressed)
 4dc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <button_pressed>
 4e0:	88 23       	and	r24, r24
 4e2:	89 f0       	breq	.+34     	; 0x506 <main+0x64>
		{
			mode = (mode + 1) % 3;
 4e4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <mode>
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	01 96       	adiw	r24, 0x01	; 1
 4ec:	be 01       	movw	r22, r28
 4ee:	0e 94 be 02 	call	0x57c	; 0x57c <__divmodhi4>
 4f2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <mode>
			button_pressed = 0;
 4f6:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <button_pressed>
			step = 0;
			frame = 0;
			line = 0;
 4fa:	90 e0       	ldi	r25, 0x00	; 0
		if (button_pressed)
		{
			mode = (mode + 1) % 3;
			button_pressed = 0;
			step = 0;
			frame = 0;
 4fc:	5e 2d       	mov	r21, r14
 4fe:	4f 2d       	mov	r20, r15
 500:	30 2f       	mov	r19, r16
 502:	21 2f       	mov	r18, r17
	{
		if (button_pressed)
		{
			mode = (mode + 1) % 3;
			button_pressed = 0;
			step = 0;
 504:	60 e0       	ldi	r22, 0x00	; 0
			frame = 0;
			line = 0;
		}

		if (tick)
 506:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <tick>
 50a:	88 23       	and	r24, r24
 50c:	39 f3       	breq	.-50     	; 0x4dc <main+0x3a>
		{
			tick = 0;
 50e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <tick>
			
			switch (mode)
 512:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <mode>
 516:	81 30       	cpi	r24, 0x01	; 1
 518:	99 f0       	breq	.+38     	; 0x540 <main+0x9e>
 51a:	18 f0       	brcs	.+6      	; 0x522 <main+0x80>
 51c:	82 30       	cpi	r24, 0x02	; 2
 51e:	f9 f0       	breq	.+62     	; 0x55e <main+0xbc>
 520:	dd cf       	rjmp	.-70     	; 0x4dc <main+0x3a>
 522:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <step>
 526:	50 93 05 01 	sts	0x0105, r21	; 0x800105 <frame>
 52a:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <frame+0x1>
 52e:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <frame+0x2>
 532:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <frame+0x3>
 536:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <line>
			{
				case 0:
					Mode1_collect();
 53a:	0e 94 c0 00 	call	0x180	; 0x180 <Mode1_collect>
					break;
 53e:	c2 cf       	rjmp	.-124    	; 0x4c4 <main+0x22>
 540:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <step>
 544:	50 93 05 01 	sts	0x0105, r21	; 0x800105 <frame>
 548:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <frame+0x1>
 54c:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <frame+0x2>
 550:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <frame+0x3>
 554:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <line>
				case 1:
					Mode2_tripleCollect();
 558:	0e 94 16 01 	call	0x22c	; 0x22c <Mode2_tripleCollect>
					break;
 55c:	b3 cf       	rjmp	.-154    	; 0x4c4 <main+0x22>
 55e:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <step>
 562:	50 93 05 01 	sts	0x0105, r21	; 0x800105 <frame>
 566:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <frame+0x1>
 56a:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <frame+0x2>
 56e:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <frame+0x3>
 572:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <line>
				case 2:
					Mode3_creative();
 576:	0e 94 98 01 	call	0x330	; 0x330 <Mode3_creative>
					break;
 57a:	a4 cf       	rjmp	.-184    	; 0x4c4 <main+0x22>

0000057c <__divmodhi4>:
 57c:	97 fb       	bst	r25, 7
 57e:	07 2e       	mov	r0, r23
 580:	16 f4       	brtc	.+4      	; 0x586 <__divmodhi4+0xa>
 582:	00 94       	com	r0
 584:	07 d0       	rcall	.+14     	; 0x594 <__divmodhi4_neg1>
 586:	77 fd       	sbrc	r23, 7
 588:	09 d0       	rcall	.+18     	; 0x59c <__divmodhi4_neg2>
 58a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__udivmodhi4>
 58e:	07 fc       	sbrc	r0, 7
 590:	05 d0       	rcall	.+10     	; 0x59c <__divmodhi4_neg2>
 592:	3e f4       	brtc	.+14     	; 0x5a2 <__divmodhi4_exit>

00000594 <__divmodhi4_neg1>:
 594:	90 95       	com	r25
 596:	81 95       	neg	r24
 598:	9f 4f       	sbci	r25, 0xFF	; 255
 59a:	08 95       	ret

0000059c <__divmodhi4_neg2>:
 59c:	70 95       	com	r23
 59e:	61 95       	neg	r22
 5a0:	7f 4f       	sbci	r23, 0xFF	; 255

000005a2 <__divmodhi4_exit>:
 5a2:	08 95       	ret

000005a4 <__udivmodhi4>:
 5a4:	aa 1b       	sub	r26, r26
 5a6:	bb 1b       	sub	r27, r27
 5a8:	51 e1       	ldi	r21, 0x11	; 17
 5aa:	07 c0       	rjmp	.+14     	; 0x5ba <__udivmodhi4_ep>

000005ac <__udivmodhi4_loop>:
 5ac:	aa 1f       	adc	r26, r26
 5ae:	bb 1f       	adc	r27, r27
 5b0:	a6 17       	cp	r26, r22
 5b2:	b7 07       	cpc	r27, r23
 5b4:	10 f0       	brcs	.+4      	; 0x5ba <__udivmodhi4_ep>
 5b6:	a6 1b       	sub	r26, r22
 5b8:	b7 0b       	sbc	r27, r23

000005ba <__udivmodhi4_ep>:
 5ba:	88 1f       	adc	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	5a 95       	dec	r21
 5c0:	a9 f7       	brne	.-22     	; 0x5ac <__udivmodhi4_loop>
 5c2:	80 95       	com	r24
 5c4:	90 95       	com	r25
 5c6:	bc 01       	movw	r22, r24
 5c8:	cd 01       	movw	r24, r26
 5ca:	08 95       	ret

000005cc <_exit>:
 5cc:	f8 94       	cli

000005ce <__stop_program>:
 5ce:	ff cf       	rjmp	.-2      	; 0x5ce <__stop_program>
